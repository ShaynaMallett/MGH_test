Successfully connected to MBTA API
{
    "definitions": {
        "ActivePeriod": {
            "description": "Start and End dates for active alert",
            "properties": {
                "end": {
                    "description": "End Date. Format is ISO8601.",
                    "example": "2017-08-14T14:54:01-04:00",
                    "format": "date-time",
                    "type": "string",
                    "x-nullable": true
                },
                "start": {
                    "description": "Start Date. Format is ISO8601.",
                    "example": "2017-08-14T14:54:01-04:00",
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Activity": {
            "description": "An activity affected by an alert.\n\n| Value                | Description                                                                                                                                                                                                                                                                       |\n|----------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `\"BOARD\"`            | Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.                                                                                                                                                                                    |\n| `\"BRINGING_BIKE\"`    | Bringing a bicycle while boarding or exiting.                                                                                                                                                                                                                                     |\n| `\"EXIT\"`             | Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.                                                                                                                                                                      |\n| `\"PARK_CAR\"`         | Parking a car at a garage or lot in a station.                                                                                                                                                                                                                                    |\n| `\"RIDE\"`             | Riding through a stop without boarding or exiting.. Not every passenger trip will include this -- a passenger may board at one stop and exit at the next stop.                                                                                                                    |\n| `\"STORE_BIKE\"`       | Storing a bicycle at a station.                                                                                                                                                                                                                                                   |\n| `\"USING_ESCALATOR\"`  | Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)                                                                                                                                                           |\n| `\"USING_WHEELCHAIR\"` | Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.  |\n",
            "example": "BOARD",
            "type": "string"
        },
        "Alert": {
            "description": "A JSON-API document with a single [AlertResource](#alertresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/AlertResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "AlertResource": {
            "description": "An effect (enumerated in `*/attributes/effect` and human-readable in `*/attributes/service_effect`) on a provided service (facility, route, route type, stop and/or trip in `/*/attributes/informed_entity`) described by a banner (`*/attributes/banner`), short header (`*/attributes/short_header`), header `*/attributes/header`, and description (`*/attributes/description`) that is active for one or more periods (`*/attributes/active_period`) caused by a cause (`*/attribute/cause`) that somewhere in its lifecycle (enumerated in `*/attributes/lifecycle` and human-readable in `*/attributes/timeframe`).\n\nSee [GTFS Realtime `FeedMessage` `FeedEntity` `Alert`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)\n\n## Descriptions\n\nThere are 5 descriptive attributes.\n\n| JSON pointer                                | Usage                                                                           |\n|---------------------------------------------|---------------------------------------------------------------------------------|\n| `*/attributes/banner`       | Display as alert across application/website                                     |\n| `*/attributes/short_header` | When `*/attributes/header` is too long to display               |\n| `*/attributes/header`       | Used before showing and prepended to `*/attributes/description` |\n| `*/attributes/description`  | Used when user asks to expand alert.                                            |\n\n## Effect\n\n| JSON pointer                                  |                |\n|-----------------------------------------------|----------------|\n| `*/attributes/effect`         | Enumerated     |\n| `*/attributes/service_effect` | Human-readable |\n\n## Timeline\n\nThere are 3 timeline related attributes\n\n| JSON pointer                                 | Description                                                                              |\n|----------------------------------------------|------------------------------------------------------------------------------------------|\n| `*/attributes/active_period` | Exact Date/Time ranges alert is active                                                   |\n| `*/attributes/lifecycle`     | Enumerated, machine-readable description of `*/attributes/active_period` |\n| `*/attributes/timeframe`     | Human-readable description of `*/attributes/active_period`               |\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "active_period": {
                            "description": "Date/Time ranges when alert is active. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `active_period`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert).\n",
                            "items": {
                                "$ref": "#/definitions/ActivePeriod"
                            },
                            "type": "array"
                        },
                        "banner": {
                            "description": "Set if alert is meant to be displayed prominently, such as the top of every page.",
                            "example": "All service suspended due to severe weather",
                            "type": "string",
                            "x-nullable": true
                        },
                        "cause": {
                            "description": "What is causing the alert.\n\n| Value |\n|-------|\n| `\"ACCIDENT\"` |\n| `\"AMTRAK\"` |\n| `\"AN_EARLIER_MECHANICAL_PROBLEM\"` |\n| `\"AN_EARLIER_SIGNAL_PROBLEM\"` |\n| `\"AUTOS_IMPEDING_SERVICE\"` |\n| `\"COAST_GUARD_RESTRICTION\"` |\n| `\"CONGESTION\"` |\n| `\"CONSTRUCTION\"` |\n| `\"CROSSING_MALFUNCTION\"` |\n| `\"DEMONSTRATION\"` |\n| `\"DISABLED_BUS\"` |\n| `\"DISABLED_TRAIN\"` |\n| `\"DRAWBRIDGE_BEING_RAISED\"` |\n| `\"ELECTRICAL_WORK\"` |\n| `\"FIRE\"` |\n| `\"FOG\"` |\n| `\"FREIGHT_TRAIN_INTERFERENCE\"` |\n| `\"HAZMAT_CONDITION\"` |\n| `\"HEAVY_RIDERSHIP\"` |\n| `\"HIGH_WINDS\"` |\n| `\"HOLIDAY\"` |\n| `\"HURRICANE\"` |\n| `\"ICE_IN_HARBOR\"` |\n| `\"MAINTENANCE\"` |\n| `\"MECHANICAL_PROBLEM\"` |\n| `\"MEDICAL_EMERGENCY\"` |\n| `\"PARADE\"` |\n| `\"POLICE_ACTION\"` |\n| `\"POWER_PROBLEM\"` |\n| `\"SEVERE_WEATHER\"` |\n| `\"SIGNAL_PROBLEM\"` |\n| `\"SLIPPERY_RAIL\"` |\n| `\"SNOW\"` |\n| `\"SPECIAL_EVENT\"` |\n| `\"SPEED_RESTRICTION\"` |\n| `\"SWITCH_PROBLEM\"` |\n| `\"TIE_REPLACEMENT\"` |\n| `\"TRACK_PROBLEM\"` |\n| `\"TRACK_WORK\"` |\n| `\"TRAFFIC\"` |\n| `\"UNRULY_PASSENGER\"` |\n| `\"WEATHER\"` |\n\nSee [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `Cause`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-cause)\n\n",
                            "enum": [
                                "ACCIDENT",
                                "AMTRAK",
                                "AN_EARLIER_MECHANICAL_PROBLEM",
                                "AN_EARLIER_SIGNAL_PROBLEM",
                                "AUTOS_IMPEDING_SERVICE",
                                "COAST_GUARD_RESTRICTION",
                                "CONGESTION",
                                "CONSTRUCTION",
                                "CROSSING_MALFUNCTION",
                                "DEMONSTRATION",
                                "DISABLED_BUS",
                                "DISABLED_TRAIN",
                                "DRAWBRIDGE_BEING_RAISED",
                                "ELECTRICAL_WORK",
                                "FIRE",
                                "FOG",
                                "FREIGHT_TRAIN_INTERFERENCE",
                                "HAZMAT_CONDITION",
                                "HEAVY_RIDERSHIP",
                                "HIGH_WINDS",
                                "HOLIDAY",
                                "HURRICANE",
                                "ICE_IN_HARBOR",
                                "MAINTENANCE",
                                "MECHANICAL_PROBLEM",
                                "MEDICAL_EMERGENCY",
                                "PARADE",
                                "POLICE_ACTION",
                                "POWER_PROBLEM",
                                "SEVERE_WEATHER",
                                "SIGNAL_PROBLEM",
                                "SLIPPERY_RAIL",
                                "SNOW",
                                "SPECIAL_EVENT",
                                "SPEED_RESTRICTION",
                                "SWITCH_PROBLEM",
                                "TIE_REPLACEMENT",
                                "TRACK_PROBLEM",
                                "TRACK_WORK",
                                "TRAFFIC",
                                "UNRULY_PASSENGER",
                                "WEATHER"
                            ],
                            "example": "ACCIDENT",
                            "type": "string"
                        },
                        "created_at": {
                            "description": "Date/Time alert created. Format is ISO8601.",
                            "example": "2017-08-14T14:54:01-04:00",
                            "format": "date-time",
                            "type": "string"
                        },
                        "description": {
                            "description": "This plain-text string will be formatted as the body of the alert (or shown on an explicit \"expand\" request by the user). The information in the description should add to the information of the header. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `description_text`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)\n",
                            "example": "If entering the station, cross Tremont Street to the Boston Common and use Park Street Elevator 978 to the Green Line westbound platform. Red Line platform access is available via the elevator beyond the fare gates. If exiting the station, please travel down the Winter Street Concourse toward Downtown Crossing Station, exit through the fare gates, and take Downtown Crossing Elevator 892 to the street level.\n",
                            "type": "string",
                            "x-nullable": true
                        },
                        "effect": {
                            "description": "The effect of this problem on the affected entity.\n\n| Value |\n|-------|\n| `\"ACCESS_ISSUE\"` |\n| `\"ADDITIONAL_SERVICE\"` |\n| `\"AMBER_ALERT\"` |\n| `\"BIKE_ISSUE\"` |\n| `\"CANCELLATION\"` |\n| `\"DELAY\"` |\n| `\"DETOUR\"` |\n| `\"DOCK_CLOSURE\"` |\n| `\"DOCK_ISSUE\"` |\n| `\"ELEVATOR_CLOSURE\"` |\n| `\"ESCALATOR_CLOSURE\"` |\n| `\"EXTRA_SERVICE\"` |\n| `\"FACILITY_ISSUE\"` |\n| `\"MODIFIED_SERVICE\"` |\n| `\"NO_SERVICE\"` |\n| `\"OTHER_EFFECT\"` |\n| `\"PARKING_CLOSURE\"` |\n| `\"PARKING_ISSUE\"` |\n| `\"POLICY_CHANGE\"` |\n| `\"SCHEDULE_CHANGE\"` |\n| `\"SERVICE_CHANGE\"` |\n| `\"SHUTTLE\"` |\n| `\"SNOW_ROUTE\"` |\n| `\"STATION_CLOSURE\"` |\n| `\"STATION_ISSUE\"` |\n| `\"STOP_CLOSURE\"` |\n| `\"STOP_MOVE\"` |\n| `\"STOP_MOVED\"` |\n| `\"SUMMARY\"` |\n| `\"SUSPENSION\"` |\n| `\"TRACK_CHANGE\"` |\n| `\"UNKNOWN_EFFECT\"` |\n\nSee [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `effect`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)\n\n",
                            "enum": [
                                "ACCESS_ISSUE",
                                "ADDITIONAL_SERVICE",
                                "AMBER_ALERT",
                                "BIKE_ISSUE",
                                "CANCELLATION",
                                "DELAY",
                                "DETOUR",
                                "DOCK_CLOSURE",
                                "DOCK_ISSUE",
                                "ELEVATOR_CLOSURE",
                                "ESCALATOR_CLOSURE",
                                "EXTRA_SERVICE",
                                "FACILITY_ISSUE",
                                "MODIFIED_SERVICE",
                                "NO_SERVICE",
                                "OTHER_EFFECT",
                                "PARKING_CLOSURE",
                                "PARKING_ISSUE",
                                "POLICY_CHANGE",
                                "SCHEDULE_CHANGE",
                                "SERVICE_CHANGE",
                                "SHUTTLE",
                                "SNOW_ROUTE",
                                "STATION_CLOSURE",
                                "STATION_ISSUE",
                                "STOP_CLOSURE",
                                "STOP_MOVE",
                                "STOP_MOVED",
                                "SUMMARY",
                                "SUSPENSION",
                                "TRACK_CHANGE",
                                "UNKNOWN_EFFECT"
                            ],
                            "example": "ACCESS_ISSUE",
                            "type": "string"
                        },
                        "effect_name": {
                            "description": "Name of the alert",
                            "example": "Delay",
                            "type": "string"
                        },
                        "header": {
                            "description": "This plain-text string will be highlighted, for example in boldface. See [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `header_text`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)\n",
                            "example": "Starting 6/3, all weekend Fairmount Line trains will be bused between Morton St. and Readville in both directions due to construction of the new Blue Hill Avenue Station.\n",
                            "type": "string"
                        },
                        "informed_entity": {
                            "description": "Entities affected by this alert.",
                            "items": {
                                "$ref": "#/definitions/InformedEntity"
                            },
                            "type": "array"
                        },
                        "lifecycle": {
                            "description": "Identifies whether alert is a new or old, in effect or upcoming.\n\n| Value                |\n|----------------------|\n| `\"NEW\"`              |\n| `\"ONGOING\"`          |\n| `\"ONGOING_UPCOMING\"` |\n| `\"UPCOMING\"`         |\n\n",
                            "example": "Ongoing",
                            "type": "string"
                        },
                        "service_effect": {
                            "description": "Summarizes the service and the impact to that service.",
                            "example": "Minor Route 216 delay",
                            "type": "string"
                        },
                        "severity": {
                            "description": "How severe the alert it from least (`0`) to most (`10`) severe.",
                            "example": 10,
                            "maximum": 10,
                            "minimum": 0,
                            "type": "integer"
                        },
                        "short_header": {
                            "description": "A shortened version of `*/attributes/header`.",
                            "example": "All weekend Fairmount Line trains will be bused between Morton St. & Readville due to construction of Blue Hill Ave Station.\n",
                            "type": "string"
                        },
                        "timeframe": {
                            "description": "Summarizes when an alert is in effect.",
                            "example": "Ongoing",
                            "type": "string",
                            "x-nullable": true
                        },
                        "updated_at": {
                            "description": "Date/Time alert last updated. Format is ISO8601.",
                            "example": "2017-08-14T14:54:01-04:00",
                            "format": "date-time",
                            "type": "string"
                        },
                        "url": {
                            "description": "A URL for extra details, such as outline construction or maintenance plans.",
                            "example": "http://www.mbta.com/uploadedfiles/Documents/Schedules_and_Maps/Commuter_Rail/fairmount.pdf?led=6/3/2017%201:22:09%20AM",
                            "type": "string",
                            "x-nullable": true
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "facility": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related facility resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related facility resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related facility link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for facility",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Alerts": {
            "description": "A page of [AlertResource](#alertresource) results",
            "properties": {
                "data": {
                    "description": "Content with [AlertResource](#alertresource) objects",
                    "items": {
                        "$ref": "#/definitions/AlertResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "BadRequest": {
            "description": "A JSON-API error document when the server cannot or will not process the request due to something that is perceived to be a client error.\n",
            "properties": {
                "errors": {
                    "items": {
                        "description": "A JSON-API error when a bad request is received",
                        "properties": {
                            "code": {
                                "description": "An application-specific error code",
                                "example": "bad_request",
                                "type": "string"
                            },
                            "detail": {
                                "description": "A short, human-readable summary of the problem",
                                "example": "Invalid sort key",
                                "type": "string"
                            },
                            "source": {
                                "description": "A JSON-API error source",
                                "properties": {
                                    "parameter": {
                                        "description": "The name of parameter that caused the error",
                                        "example": "sort",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The HTTP status code applicable to the problem",
                                "example": "400",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "errors"
            ],
            "type": "object"
        },
        "Facilities": {
            "description": "A page of [FacilityResource](#facilityresource) results",
            "properties": {
                "data": {
                    "description": "Content with [FacilityResource](#facilityresource) objects",
                    "items": {
                        "$ref": "#/definitions/FacilityResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "Facility": {
            "description": "A JSON-API document with a single [FacilityResource](#facilityresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/FacilityResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "FacilityProperty": {
            "description": "Name/value pair for additional facility information",
            "example": {
                "name": "address",
                "value": "197 Ivory St, Braintree, MA 02184"
            },
            "properties": {
                "name": {
                    "description": "The name of the property",
                    "example": "address",
                    "type": "string"
                },
                "value": {
                    "description": "The value of the property",
                    "example": "197 Ivory St, Braintree, MA 02184",
                    "type": [
                        "string",
                        "integer"
                    ]
                }
            },
            "type": "object"
        },
        "FacilityResource": {
            "description": "Amenities at a station stop (`*/relationships/stop`) such as elevators, escalators, parking lots, and bike storage.\n\nAn [MBTA extension](https://groups.google.com/forum/#!topic/gtfs-changes/EzC5m9k45pA).  This spec is not yet finalized.\n\n## Accessibility\n\nRiders with limited mobility can search any facility, either `ELEVATOR` or `ESCALATOR`, while riders that need wheelchair access can search for `ELEVATOR` only.\n\nThe lack of an `ELEVATOR` MAY NOT make a stop wheelchair inaccessible.  Riders should check `/stops/{id}` `/data/attributes/wheelchair_boarding` is `1` to guarantee a path is available from the station entrance to the stop or `0` if it MAY be accessible.  Completely avoid `2` as that is guaranteed to be INACCESSIBLE.\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "latitude": {
                            "description": "Latitude of the facility.  Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS `facilities.txt` `facility_lat`]\n",
                            "example": -71.194994,
                            "type": "number"
                        },
                        "long_name": {
                            "description": "Name of the facility",
                            "example": "SHAWMUT - Ashmont Bound Platform to Lobby",
                            "type": "string"
                        },
                        "longitude": {
                            "description": "Longitude of the facility. Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See\n[GTFS `facilities.txt` `facility_lon`]\n",
                            "example": 42.316115,
                            "type": "number"
                        },
                        "properties": {
                            "description": "A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.",
                            "items": {
                                "$ref": "#/definitions/FacilityProperty"
                            },
                            "type": "array"
                        },
                        "short_name": {
                            "description": "Short name of the facility",
                            "example": "Ashmont platform to lobby",
                            "type": "string"
                        },
                        "type": {
                            "description": "The type of the facility.",
                            "enum": [
                                "BIKE_STORAGE",
                                "BRIDGE_PLATE",
                                "ELECTRIC_CAR_CHARGERS",
                                "ELEVATED_SUBPLATFORM",
                                "ELEVATOR",
                                "ESCALATOR",
                                "FARE_MEDIA_ASSISTANCE_FACILITY",
                                "FARE_MEDIA_ASSISTANT",
                                "FARE_VENDING_MACHINE",
                                "FARE_VENDING_RETAILER",
                                "FULLY_ELEVATED_PLATFORM",
                                "OTHER",
                                "PARKING_AREA",
                                "PICK_DROP",
                                "PORTABLE_BOARDING_LIFT",
                                "RAMP",
                                "TAXI_STAND",
                                "TICKET_WINDOW"
                            ],
                            "example": "ELEVATOR",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "stop": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related stop resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related stop resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related stop link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for stop",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Forbidden": {
            "description": "A JSON-API error document when the API key is invalid",
            "properties": {
                "errors": {
                    "items": {
                        "description": "A JSON-API error when an invalid API key is received",
                        "properties": {
                            "code": {
                                "description": "An application-specific error code",
                                "example": "forbidden",
                                "type": "string"
                            },
                            "status": {
                                "description": "The HTTP status code applicable to the problem",
                                "example": "403",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "errors"
            ],
            "type": "object"
        },
        "InformedEntity": {
            "description": "An entity affected by an alert. At least one of the fields other than `activities` will be non-null. The affected entity is the intersection of these fields, not the union: if `stop` and `route` both have values, the alert does not affect the entire route.\n\nSee [GTFS Realtime `FeedMessage` `FeedEntity` `Alert` `EntitySelector`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-entityselector).\n\n* `activities` - The activities affected.\n* `direction_id` - The direction of the affected `trip`. See     [GTFS `trips.txt` `direction_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt).\n* `facility` - The facility affected.\n* `route` - The route affected. See     [GTFS `routes.txt` `route_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt)\n* `route_type` - The type of route affected. If present alone, indicates the entire mode of transit is affected. See     [GTFS `routes.txt` `route_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt)\n* `stop` - The stop affected. See     [GTFS `stops.txt` `stop_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt)\n* `trip` - The trip affected. See     [GTFS `trips.txt` `trip_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt)\n",
            "properties": {
                "activities": {
                    "description": "Activities affected by this alert.\n\nIf an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `\"BOARD\"` represents customers boarding at the informed entity, then the entity includes `activities` `[\"BOARD\"]`. If the alert affected customers exiting at the platform too, then `activities` is `[\"BOARD\", \"EXIT\"]`.\n\nIt should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `\"BOARD\"`, `\"EXIT\"`, and `\"USING_WHEELCHAIR\"` [to board or exit], and a station were closed, then the `activities` array would include `\"BOARD\"` and `\"EXIT\"` but it would not be necessary to include the activity `\"USING_WHEELCHAIR\"`. Any rider entering the station who is `\"USING_WHEELCHAIR\"` is also a rider who `\"BOARD\"`s. Using a wheelchair to board is not specifically affected.\n",
                    "example": [
                        "BOARD",
                        "EXIT"
                    ],
                    "items": {
                        "$ref": "#/definitions/Activity"
                    },
                    "type": "array"
                },
                "direction_id": {
                    "description": "`direction_id` of the affected Trip.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n",
                    "enum": [
                        0,
                        1
                    ],
                    "example": 0,
                    "type": "integer",
                    "x-nullable": true
                },
                "facility": {
                    "description": "`id` of the affected Facility.",
                    "example": "405",
                    "type": "string",
                    "x-nullable": true
                },
                "route": {
                    "description": "`id` of the affected Route.",
                    "example": "CR-Worcester",
                    "type": "string",
                    "x-nullable": true
                },
                "route_type": {
                    "description": "`type` of the affected Route.\n\n| Value | Name          | Example    |\n|-------|---------------|------------|\n| `0`   | Light Rail    | Green Line |\n| `1`   | Heavy Rail    | Red Line   |\n| `2`   | Commuter Rail |            |\n| `3`   | Bus           |            |\n| `4`   | Ferry         |            |\n",
                    "example": 2,
                    "type": "integer",
                    "x-nullable": true
                },
                "stop": {
                    "description": "`id` of the affected Stop.",
                    "example": "Auburndale",
                    "type": "string",
                    "x-nullable": true
                },
                "trip": {
                    "description": "`id` of the affected Trip.",
                    "example": "CR-Weekday-Spring-17-517",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "Line": {
            "description": "A JSON-API document with a single [LineResource](#lineresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/LineResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "LineResource": {
            "description": "Line represents a combination of routes",
            "properties": {
                "attributes": {
                    "properties": {
                        "color": {
                            "description": "In systems that have colors assigned to lines, the route_color field defines a color that corresponds to a line. The color must be provided as a six-character hexadecimal number, for example, `00FFFF`.\n",
                            "example": "FFFFFF",
                            "type": "string"
                        },
                        "long_name": {
                            "description": "Lengthier, public-facing name for the group of routes represented in this line\n",
                            "example": "Sullivan - Ruggles",
                            "type": "string"
                        },
                        "short_name": {
                            "description": "Short, public-facing name for the group of routes represented in this line\n",
                            "example": "CT2",
                            "type": "string"
                        },
                        "sort_order": {
                            "description": "Lines sort in ascending order",
                            "type": "integer"
                        },
                        "text_color": {
                            "description": "This field can be used to specify a legible color to use for text drawn against a background of line_color. The color must be provided as a six-character hexadecimal number, for example, `FFD700`.\n",
                            "example": "000000",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {},
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Lines": {
            "description": "A page of [LineResource](#lineresource) results",
            "properties": {
                "data": {
                    "description": "Content with [LineResource](#lineresource) objects",
                    "items": {
                        "$ref": "#/definitions/LineResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "LiveFacilities": {
            "description": "A page of [LiveFacilityResource](#livefacilityresource) results",
            "properties": {
                "data": {
                    "description": "Content with [LiveFacilityResource](#livefacilityresource) objects",
                    "items": {
                        "$ref": "#/definitions/LiveFacilityResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "LiveFacility": {
            "description": "A JSON-API document with a single [LiveFacilityResource](#livefacilityresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/LiveFacilityResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "LiveFacilityResource": {
            "description": "Live data about a given facility.\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "properties": {
                            "description": "A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.",
                            "items": {
                                "$ref": "#/definitions/FacilityProperty"
                            },
                            "type": "array"
                        },
                        "updated_at": {
                            "description": "Time of last update",
                            "example": "2017-08-14T15:38:58-04:00",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {},
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NotAcceptable": {
            "description": "A JSON-API error document when a request uses an invalid 'accept' header",
            "properties": {
                "errors": {
                    "items": {
                        "description": "A JSON-API error when a request uses an invalid 'accept' header",
                        "properties": {
                            "code": {
                                "description": "An application-specific error code",
                                "example": "not_acceptable",
                                "type": "string"
                            },
                            "detail": {
                                "description": "Human-readable summary of the problem",
                                "example": "Content-type text/event-stream is not supported for this kind of request.",
                                "type": "string"
                            },
                            "status": {
                                "description": "The HTTP status code applicable to the problem",
                                "example": "406",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "errors"
            ],
            "type": "object"
        },
        "NotFound": {
            "description": "A JSON-API error document when a resource is not found",
            "properties": {
                "errors": {
                    "items": {
                        "description": "A JSON-API error when a resource is not found",
                        "properties": {
                            "code": {
                                "description": "An application-specific error code",
                                "example": "not_found",
                                "type": "string"
                            },
                            "source": {
                                "description": "A JSON-API error source",
                                "properties": {
                                    "parameter": {
                                        "description": "The name of parameter that was used to lookup up the resource that was not found",
                                        "example": "id",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The HTTP status code applicable to the problem",
                                "example": "404",
                                "type": "string"
                            },
                            "title": {
                                "description": "A short, human-readable summary of the problem",
                                "example": "Resource Not Found",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "errors"
            ],
            "type": "object"
        },
        "OccupancyResource": {
            "description": "An expected or predicted level of occupancy for a given trip.\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "percentage": {
                            "description": "Percentage of seats occupied.\n",
                            "example": 55,
                            "type": "integer",
                            "x-nullable": true
                        },
                        "status": {
                            "description": "The degree of passenger occupancy for the vehicle. See [GTFS-realtime OccupancyStatus](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-vehiclestopstatus).\n\n| _**Value**_                    | _**Description**_                                                                                   |\n|--------------------------------|-----------------------------------------------------------------------------------------------------|\n| **MANY_SEATS_AVAILABLE**       | Not crowded: the vehicle has a large percentage of seats available. |\n| **FEW_SEATS_AVAILABLE**        | Some crowding: the vehicle has a small percentage of seats available. |\n| **FULL**                       | Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board. |\n\n",
                            "example": "SOME_CROWDING",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {},
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PredictionResource": {
            "description": "The predicted arrival time (`/*/attributes/arrival_time`) and departure time (`*/attributes/departure_time`) to/from a stop (`*/relationships/stop/data/id`) at a given sequence (`*/attriutes/stop_sequence`) along a trip (`*/relationships/trip/data/id`) going a direction (`*/attributes/direction_id`) along a route (`*/relationships/route/data/id`).\n\nSee [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-tripdescriptor)\nSee [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeupdate)\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "arrival_time": {
                            "description": "When the vehicle is now predicted to arrive.  `null` if the first stop (`*/relationships/stop/data/id`) on the trip (`*/relationships/trip/data/id`). See [GTFS `Realtime` `FeedMessage` `FeedEntity` `TripUpdate` `StopTimeUpdate` `arrival`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeupdate).\nFormat is ISO8601.\n",
                            "example": "2017-08-14T15:38:58-04:00",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "departure_time": {
                            "description": "When the vehicle is now predicted to depart.  `null` if the last stop (`*/relationships/stop/data/id`) on the trip (`*/relationships/trip/data/id`). See [GTFS `Realtime` `FeedMessage` `FeedEntity` `TripUpdate` `StopTimeUpdate` `departure`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeupdate).\nFormat is ISO8601.\n",
                            "example": "2017-08-14T15:38:58-04:00",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "direction_id": {
                            "description": "Direction in which trip is traveling: `0` or `1`.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n",
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        "schedule_relationship": {
                            "description": "How the predicted stop relates to the `Model.Schedule.t` stops.\n\n| Value           | Description |\n|-----------------|-------------|\n| `\"ADDED\"`       | An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to respond to sudden passenger load. See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor` `ScheduleRelationship` `ADDED`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship-1) |\n| `\"CANCELLED\"`   | A trip that existed in the schedule but was removed. See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor` `ScheduleRelationship` `CANCELED`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship-1) |\n| `\"NO_DATA\"`     | No data is given for this stop. It indicates that there is no realtime information available. See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate` `ScheduleRelationship` `NO_DATA`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship) |\n| `\"SKIPPED\"`     | The stop was originally scheduled, but was skipped. See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate` `ScheduleRelationship`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship) |\n| `\"UNSCHEDULED\"` | A trip that is running with no schedule associated to it. See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor` `ScheduleRelationship` `UNSCHEDULED`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship-1) |\n| `null`          | Stop was scheduled.  See [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor` `ScheduleRelationship` `SCHEDULED`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship-1) |\n\nSee [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor` `ScheduleRelationship`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship-1)\nSee [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate` `ScheduleRelationship`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-schedulerelationship)\n",
                            "example": "UNSCHEDULED",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "status": {
                            "description": "Status of the schedule",
                            "example": "Approaching",
                            "type": "string"
                        },
                        "stop_sequence": {
                            "description": "The sequence the stop (`*/relationships/stop/data/id`) is arrived at during the trip (`*/relationships/trip/data/id`).  The stop sequence is monotonically increasing along the trip, but the `stop_sequence` along the trip are not necessarily consecutive.\n\nSee [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate` `stop_sequence`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeupdate).\n",
                            "example": 19,
                            "type": [
                                "integer",
                                "null"
                            ]
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "alerts": {
                            "properties": {
                                "data": {
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Related alerts resource id",
                                                "type": "string"
                                            },
                                            "type": {
                                                "description": "Type of related alerts resource",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related alerts link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for alerts",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "route": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related route resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related route resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related route link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for route",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "schedule": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related schedule resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related schedule resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related schedule link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for schedule",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "stop": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related stop resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related stop resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related stop link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for stop",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "trip": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related trip resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related trip resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related trip link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for trip",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "vehicle": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related vehicle resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related vehicle resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related vehicle link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for vehicle",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Predictions": {
            "description": "A page of [PredictionResource](#predictionresource) results",
            "properties": {
                "data": {
                    "description": "Content with [PredictionResource](#predictionresource) objects",
                    "items": {
                        "$ref": "#/definitions/PredictionResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "Route": {
            "description": "A JSON-API document with a single [RouteResource](#routeresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/RouteResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "RoutePattern": {
            "description": "A JSON-API document with a single [RoutePatternResource](#routepatternresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/RoutePatternResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "RoutePatternResource": {
            "description": "Information about the different variations of service that may be run within a single route_id, including when and how often they are operated.\nSee [GTFS `route_patterns.txt](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#route_patternstxt) for the base specification.\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "direction_id": {
                            "description": "Direction in which trip is traveling: `0` or `1`.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n",
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        "name": {
                            "description": "User-facing description of where trips on the route pattern serve.\nThese names are published in the form\nDestination,\nDestination via Street or Landmark,\nOrigin - Destination,\nor Origin - Destination via Street or Landmark.\nNote that names for bus and subway route patterns currently do not include the origin location,\nbut will in the future.\n",
                            "example": "Forge Park/495 - South Station via Fairmount",
                            "type": "string"
                        },
                        "sort_order": {
                            "description": "Can be used to order the route patterns in a way which is ideal for presentation to customers.\nRoute patterns with smaller sort_order values should be displayed before those with larger values.\n",
                            "type": "integer"
                        },
                        "time_desc": {
                            "description": "User-facing description of when the route pattern operate. Not all route patterns will include a time description\n",
                            "example": "Early mornings only",
                            "type": [
                                "string",
                                "null"
                            ],
                            "x-nullable": true
                        },
                        "typicality": {
                            "description": "Explains how common the route pattern is. For the MBTA, this is within the context of the entire route. Current valid values are:\n| Value | Description |\n|-|-|\n| `0` | Not defined |\n| `1` | Typical. Pattern is common for the route. Most routes will have only one such pattern per direction. A few routes may have more than 1, such as the Red Line (with one branch to Ashmont and another to Braintree); routes with more than 2 are rare. |\n| `2` | Pattern is a deviation from the regular route. |\n| `3` | Pattern represents a highly atypical pattern for the route, such as a special routing which only runs a handful of times per day. |\n| `4` | Diversions from normal service, such as planned detours, bus shuttles, or snow routes. |\n",
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4
                            ],
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "representative_trip": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related representative_trip resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related representative_trip resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related representative_trip link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for representative_trip",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "route": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related route resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related route resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related route link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for route",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RoutePatterns": {
            "description": "A page of [RoutePatternResource](#routepatternresource) results",
            "properties": {
                "data": {
                    "description": "Content with [RoutePatternResource](#routepatternresource) objects",
                    "items": {
                        "$ref": "#/definitions/RoutePatternResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "RouteResource": {
            "description": "Path a vehicle travels during service. See [GTFS `routes.txt](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt) for the base specification.\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "color": {
                            "description": "A color that corresponds to the route, such as the line color on a map.\" See [GTFS `routes.txt` `route_color`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt).\n",
                            "example": "FFFFFF",
                            "type": "string"
                        },
                        "description": {
                            "description": "Details about stops, schedule, and/or service.  See\n[GTFS `routes.txt` `route_desc`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt).\n",
                            "example": "Rapid Transit",
                            "type": "string"
                        },
                        "direction_destinations": {
                            "items": {
                                "description": "The destinations for direction ids for this route in ascending ordering starting at `0` for the first index.\n",
                                "type": "string",
                                "x-nullable": true
                            },
                            "type": "array"
                        },
                        "direction_names": {
                            "items": {
                                "description": "The names of direction ids for this route in ascending ordering starting at `0` for the first index.\n",
                                "type": "string",
                                "x-nullable": true
                            },
                            "type": "array"
                        },
                        "fare_class": {
                            "description": "Specifies the fare type of the route, which can differ from the service category.\n",
                            "example": "Free",
                            "type": "string"
                        },
                        "long_name": {
                            "description": "The full name of a route. This name is generally more descriptive than the `short_name` and will often include the route's destination or stop. See [GTFS `routes.txt` `route_long_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt).\n",
                            "example": "Red Line",
                            "type": "string"
                        },
                        "short_name": {
                            "description": "This will often be a short, abstract identifier like \"32\", \"100X\", or \"Green\" that riders use to identify a route, but which doesn't give any indication of what places the route serves. See [GTFS `routes.txt` `route_short_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt).\n",
                            "example": "Red",
                            "type": "string"
                        },
                        "sort_order": {
                            "description": "Routes sort in ascending order",
                            "type": "integer"
                        },
                        "text_color": {
                            "description": "A legible color to use for text drawn against a background of the route's `color` attribute. See [GTFS `routes.txt` `route_text_color`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt).\n",
                            "example": "000000",
                            "type": "string"
                        },
                        "type": {
                            "description": "| Value | Name          | Example    |\n|-------|---------------|------------|\n| `0`   | Light Rail    | Green Line |\n| `1`   | Heavy Rail    | Red Line   |\n| `2`   | Commuter Rail |            |\n| `3`   | Bus           |            |\n| `4`   | Ferry         |            |\n",
                            "example": 1,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {},
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Routes": {
            "description": "A page of [RouteResource](#routeresource) results",
            "properties": {
                "data": {
                    "description": "Content with [RouteResource](#routeresource) objects",
                    "items": {
                        "$ref": "#/definitions/RouteResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "ScheduleResource": {
            "description": "A schedule is the arrival drop off (`*/attributes/drop_off_type`) time (`*/attributes/arrival_time`) and departure pick up (`*/attributes/pickup_type`) time (`*/attributes/departure_time`) to/from a stop (`*/relationships/stop/data/id`) at a given sequence (`*/attributes/stop_sequence`) along a trip (`*/relationships/trip/data/id`) going in a direction (`*/attributes/direction_id`) on a route (`*/relationships/route/data/id`) when the trip is following a service (`*/relationships/service/data/id`) to determine when it is active.\n\nSee [GTFS `stop_times.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) for base specification.\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "arrival_time": {
                            "description": "Time when the trip arrives at the given stop. See [GTFS `stop_times.txt` `arrival_time`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt)\nFormat is ISO8601.\n",
                            "example": "2017-08-14T15:04:00-04:00",
                            "format": "date-time",
                            "type": "string"
                        },
                        "departure_time": {
                            "description": "Time when the trip departs the given stop. See [GTFS `stop_times.txt` `departure_time`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt)\nFormat is ISO8601.\n",
                            "example": "2017-08-14T15:04:00-04:00",
                            "format": "date-time",
                            "type": "string"
                        },
                        "direction_id": {
                            "description": "Direction in which trip is traveling: `0` or `1`.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n",
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        "drop_off_type": {
                            "description": "How the vehicle arrives at `stop_id`.\n\n| Value | Description                                   |\n|-------|-----------------------------------------------|\n| `0`   | Regularly scheduled drop off                  |\n| `1`   | No drop off available                         |\n| `2`   | Must phone agency to arrange pickup           |\n| `3`   | Must coordinate with driver to arrange pickup |\n\nSee [GTFS `stop_times.txt` `drop_off_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt)\n",
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "example": 1,
                            "type": "integer"
                        },
                        "pickup_type": {
                            "description": "How the vehicle departs from `stop_id`.\n\n| Value | Description                                   |\n|-------|-----------------------------------------------|\n| `0`   | Regularly scheduled pickup                    |\n| `1`   | No pickup available                           |\n| `2`   | Must phone agency to arrange pickup           |\n| `3`   | Must coordinate with driver to arrange pickup |\n\nSee [GTFS `stop_times.txt` `pickup_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt)\n",
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "example": 0,
                            "type": "integer"
                        },
                        "stop_headsign": {
                            "description": "Text identifying destination of the trip, overriding trip-level headsign if present.See [GTFS `stop_times.txt` `stop_headsign`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt)\n",
                            "example": "Foxboro via Back Bay",
                            "type": "string",
                            "x-nullable": true
                        },
                        "stop_sequence": {
                            "description": "The sequence the `stop_id` is arrived at during the `trip_id`.  The stop sequence is monotonically increasing along the trip, but the `stop_sequence` along the `trip_id` are not necessarily consecutive.  See [GTFS `stop_times.txt` `stop_sequence`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt)\n",
                            "example": 1,
                            "type": "integer"
                        },
                        "timepoint": {
                            "description": "| Value   | `*/attributes/arrival_time` and `*/attributes/departure_time` |\n|---------|---------------------------------------------------------------|\n| `true`  | Exact                                                         |\n| `false` | Estimates                                                     |\n\nSee [GTFS `stop_times.txt` `timepoint`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt)\n",
                            "example": false,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "prediction": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related prediction resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related prediction resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related prediction link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for prediction",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "route": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related route resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related route resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related route link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for route",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "stop": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related stop resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related stop resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related stop link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for stop",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "trip": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related trip resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related trip resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related trip link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for trip",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Schedules": {
            "description": "A page of [ScheduleResource](#scheduleresource) results",
            "properties": {
                "data": {
                    "description": "Content with [ScheduleResource](#scheduleresource) objects",
                    "items": {
                        "$ref": "#/definitions/ScheduleResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "Service": {
            "description": "A JSON-API document with a single [ServiceResource](#serviceresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/ServiceResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "ServiceResource": {
            "description": "Service represents a set of dates on which trips run.",
            "properties": {
                "attributes": {
                    "properties": {
                        "added_dates": {
                            "items": {
                                "description": "Aditional dates when the service is valid. Format is ISO8601.",
                                "example": "2018-11-21",
                                "format": "date",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "added_dates_notes": {
                            "items": {
                                "description": "Extra information about additional dates (e.g. holiday name)",
                                "example": "New Year Day",
                                "format": "string",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": {
                            "description": "Human-readable description of the service, as it should appear on public-facing websites and applications.",
                            "example": "Weekday schedule (no school)",
                            "type": "string",
                            "x-nullable": true
                        },
                        "end_date": {
                            "description": "Latest date which is valid for this service. Format is ISO8601.",
                            "example": "2018-12-24",
                            "format": "date",
                            "type": "string"
                        },
                        "rating_description": {
                            "description": "Human-readable description of the rating (season), as it should appear on public-facing websites and applications.",
                            "example": "Winter",
                            "type": "string",
                            "x-nullable": true
                        },
                        "rating_end_date": {
                            "description": "Latest date which is a part of the rating (season) which contains this service. Format is ISO8601.",
                            "example": "2019-03-14",
                            "format": "date",
                            "type": "string",
                            "x-nullable": true
                        },
                        "rating_start_date": {
                            "description": "Earliest date which is a part of the rating (season) which contains this service. Format is ISO8601.",
                            "example": "2018-12-22",
                            "format": "date",
                            "type": "string",
                            "x-nullable": true
                        },
                        "removed_dates": {
                            "items": {
                                "description": "Exceptional dates when the service is not valid. Format is ISO8601.",
                                "example": "2018-12-17",
                                "format": "date",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "removed_dates_notes": {
                            "items": {
                                "description": "Extra information about exceptional dates (e.g. holiday name)",
                                "example": "New Year Day",
                                "format": "string",
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "schedule_name": {
                            "description": "Description of when the `service_id` is in effect.",
                            "example": "Weekday (no school)",
                            "type": "string",
                            "x-nullable": true
                        },
                        "schedule_type": {
                            "description": "Description of the schedule type the service_id can be applied.\nFor example, on a holiday, the schedule_type value may be \"Saturday\" or \"Sunday\".\nCurrent valid values are \"Weekday\", \"Saturday\", \"Sunday\", or \"Other\"\n",
                            "example": "Sunday",
                            "type": "string",
                            "x-nullable": true
                        },
                        "schedule_typicality": {
                            "description": "Describes how well this schedule represents typical service for the listed `schedule_type`\n\n| Value | Description                                                                 |\n|-------|-----------------------------------------------------------------------------|\n| `0`   | Not defined.                                                                |\n| `1`   | Typical service with perhaps minor modifications                            |\n| `2`   | Extra service supplements typical schedules                                 |\n| `3`   | Reduced holiday service is provided by typical Saturday or Sunday schedule  |\n| `4`   | Major changes in service due to a planned disruption, such as construction  |\n| `5`   | Major reductions in service for weather events or other atypical situations |\n",
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "example": 1,
                            "type": "integer"
                        },
                        "start_date": {
                            "description": "Earliest date which is valid for this service. Format is ISO8601.",
                            "example": "2018-11-19",
                            "format": "date",
                            "type": "string"
                        },
                        "valid_days": {
                            "items": {
                                "description": "  Day of week. From Monday as 1 to Sunday as 7.\n",
                                "example": "1",
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {},
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Services": {
            "description": "A page of [ServiceResource](#serviceresource) results",
            "properties": {
                "data": {
                    "description": "Content with [ServiceResource](#serviceresource) objects",
                    "items": {
                        "$ref": "#/definitions/ServiceResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "Shape": {
            "description": "A JSON-API document with a single [ShapeResource](#shaperesource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/ShapeResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "ShapeResource": {
            "description": "Sequence of geographic points representing a path vehicles will travel on a trip. See [GTFS `shapes.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#shapestxt).\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "polyline": {
                            "description": "The sequence of points in [Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm).\nLibraries for decoding polylines are available in many languages, for example:\n\n* [Elixir](https://hex.pm/packages/polyline)\n* [JavaScript](https://www.npmjs.com/package/polyline)\n* [Python](https://pypi.org/project/polyline/)\n",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {},
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Shapes": {
            "description": "A page of [ShapeResource](#shaperesource) results",
            "properties": {
                "data": {
                    "description": "Content with [ShapeResource](#shaperesource) objects",
                    "items": {
                        "$ref": "#/definitions/ShapeResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "Stop": {
            "description": "A JSON-API document with a single [StopResource](#stopresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/StopResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "StopResource": {
            "description": "Physical location where transit can pick-up or drop-off passengers. See https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt for more details and https://github.com/mbta/gtfs-documentation/blob/master/reference/gtfs.md#stopstxt for specific extensions.",
            "properties": {
                "attributes": {
                    "properties": {
                        "address": {
                            "description": "A street address for the station. See [MBTA extensions to GTFS](https://docs.google.com/document/d/1RoQQj3_-7FkUlzFP4RcK1GzqyHp4An2lTFtcmW0wrqw/view).\n",
                            "example": "Alewife Brook Parkway and Cambridge Park Drive, Cambridge, MA 02140",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "at_street": {
                            "description": "The cross street at which the stop is located.",
                            "example": "Essex Street",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "description": {
                            "description": "Description of the stop. See [GTFS `stops.txt` `stop_desc`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt).\n",
                            "example": "Alewife - Red Line",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "latitude": {
                            "description": "Latitude of the stop or station.  Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS `stops.txt` `stop_lat`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt).\n",
                            "example": -71.194994,
                            "type": "number"
                        },
                        "location_type": {
                            "description": "The type of the stop.\n\n| Value | Type | Description |\n| - | - | - |\n| `0` | Stop | A location where passengers board or disembark from a transit vehicle. |\n| `1` | Station | A physical structure or area that contains one or more stops. |\n| `2` | Station Entrance/Exit | A location where passengers can enter or exit a station from the street. The stop entry must also specify a parent_station value referencing the stop ID of the parent station for the entrance. |\n| `3` | Generic Node | A location within a station, not matching any other location_type, which can be used to link together pathways defined in pathways.txt. |\n\nSee also [GTFS `stops.txt` `location_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt).\n",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "type": "integer"
                        },
                        "longitude": {
                            "description": "Longitude of the stop or station. Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See\n[GTFS `stops.txt` `stop_lon`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt).\n",
                            "example": 42.316115,
                            "type": "number"
                        },
                        "municipality": {
                            "description": "The municipality in which the stop is located.",
                            "example": "Cambridge",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "name": {
                            "description": "Name of a stop or station in the local and tourist vernacular.  See [GTFS `stops.txt` `stop_name](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt)\n",
                            "example": "Parker St @ Hagen Rd",
                            "type": "string"
                        },
                        "on_street": {
                            "description": "The street on which the stop is located.",
                            "example": "Massachusetts Avenue",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "platform_code": {
                            "description": "A short code representing the platform/track (like a number or letter). See [GTFS `stops.txt` `platform_code`](https://developers.google.com/transit/gtfs/reference/gtfs-extensions#stopstxt_1).\n",
                            "example": "5",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "platform_name": {
                            "description": "A textual description of the platform or track. See [MBTA extensions to GTFS](https://docs.google.com/document/d/1RoQQj3_-7FkUlzFP4RcK1GzqyHp4An2lTFtcmW0wrqw/view).\n",
                            "example": "Red Line",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "vehicle_type": {
                            "description": "The type of transportation used at the stop. `vehicle_type` will be a valid routes.txt `route_type` value:\n\n| Value | Name          | Example    |\n|-------|---------------|------------|\n| `0`   | Light Rail    | Green Line |\n| `1`   | Heavy Rail    | Red Line   |\n| `2`   | Commuter Rail |            |\n| `3`   | Bus           |            |\n| `4`   | Ferry         |            |\n\n",
                            "example": 3,
                            "type": [
                                "integer",
                                "null"
                            ]
                        },
                        "wheelchair_boarding": {
                            "description": "Whether there are any vehicles with wheelchair boarding or paths to stops that are wheelchair acessible: 0, 1, 2.\n\nWheelchair boarding (`*/attributes/wheelchair_boarding`) corresponds to [GTFS wheelchair_boarding](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt). The MBTA handles parent station inheritance itself, so value can be treated simply:\n\n| Value | Meaning                                       |\n|-------|-----------------------------------------------|\n| `0`   | No Information                                |\n| `1`   | Accessible (if trip is wheelchair accessible) |\n| `2`   | Inaccessible                                  |\n\n",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "example": 0,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "parent_station": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related parent_station resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related parent_station resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related parent_station link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for parent_station",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Stops": {
            "description": "A page of [StopResource](#stopresource) results",
            "properties": {
                "data": {
                    "description": "Content with [StopResource](#stopresource) objects",
                    "items": {
                        "$ref": "#/definitions/StopResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "TooManyRequests": {
            "description": "A JSON-API error document when rate limited",
            "properties": {
                "errors": {
                    "items": {
                        "description": "A JSON-API error when rate limited",
                        "properties": {
                            "code": {
                                "description": "An application-specific error code",
                                "example": "rate_limited",
                                "type": "string"
                            },
                            "detail": {
                                "description": "Human-readable summary of the problem",
                                "example": "You have exceeded your allowed usage rate.",
                                "type": "string"
                            },
                            "status": {
                                "description": "The HTTP status code applicable to the problem",
                                "example": "429",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                }
            },
            "required": [
                "errors"
            ],
            "type": "object"
        },
        "Trip": {
            "description": "A JSON-API document with a single [TripResource](#tripresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/TripResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "TripResource": {
            "description": "Representation of the journey of a particular vehicle through a given set of stops. See [GTFS `trips.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt)\n",
            "properties": {
                "attributes": {
                    "properties": {
                        "bikes_allowed": {
                            "description": "Indicator of whether or not bikes are allowed on this trip: `0`, `1`, `2`\n\nBikes allowed (`*/attributes/bikes_allowed`) [as defined in GTFS](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt):\n\n| Value | Meaning                                                                         |\n|-------|---------------------------------------------------------------------------------|\n| `0`   | No information                                                                  |\n| `1`   | Vehicle being used on this particular trip can accommodate at least one bicycle |\n| `2`   | No bicycles are allowed on this trip                                            |\n\n",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "example": 1,
                            "type": "integer"
                        },
                        "block_id": {
                            "description": "ID used to group sequential trips with the same vehicle for a given service_id. See [GTFS `trips.txt` `block_id`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt)\n",
                            "example": "1070",
                            "type": "string"
                        },
                        "direction_id": {
                            "description": "Direction in which trip is traveling: `0` or `1`.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n",
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        "headsign": {
                            "description": "The text that appears on a sign that identifies the trip's destination to passengers. See [GTFS `trips.txt` `trip_headsign`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt).\n",
                            "example": "Harvard",
                            "type": "string"
                        },
                        "name": {
                            "description": "The text that appears in schedules and sign boards to identify the trip to passengers, for example, to identify train numbers for commuter rail trips. See [GTFS `trips.txt` `trip_short_name`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt)\n",
                            "example": "596",
                            "type": "string"
                        },
                        "wheelchair_accessible": {
                            "description": "Indicator of wheelchair accessibility: `0`, `1`, `2`\n\nWheelchair accessibility (`*/attributes/wheelchair_accessible`) [as defined in GTFS](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt):\n\n| Value | Meaning                                            |\n|-------|----------------------------------------------------|\n| `0`   | No information                                     |\n| `1`   | Accessible (at stops allowing wheelchair_boarding) |\n| `2`   | Inaccessible                                       |\n\n",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "example": 1,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "occupancy": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related occupancy resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related occupancy resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related occupancy link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for occupancy",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "route": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related route resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related route resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related route link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for route",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "route_pattern": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related route_pattern resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related route_pattern resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related route_pattern link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for route_pattern",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "service": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related service resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related service resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related service link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for service",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "shape": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related shape resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related shape resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related shape link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for shape",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Trips": {
            "description": "A page of [TripResource](#tripresource) results",
            "properties": {
                "data": {
                    "description": "Content with [TripResource](#tripresource) objects",
                    "items": {
                        "$ref": "#/definitions/TripResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "Vehicle": {
            "description": "A JSON-API document with a single [VehicleResource](#vehicleresource) resource",
            "properties": {
                "data": {
                    "$ref": "#/definitions/VehicleResource"
                },
                "included": {
                    "description": "Included resources",
                    "items": {
                        "properties": {
                            "id": {
                                "description": "The JSON-API resource ID",
                                "type": "string"
                            },
                            "type": {
                                "description": "The JSON-API resource type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "self": {
                            "description": "the link that generated the current response document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        },
        "VehicleResource": {
            "description": "Current state of a vehicle on a trip.",
            "properties": {
                "attributes": {
                    "properties": {
                        "bearing": {
                            "description": "Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. See [GTFS-realtime Position bearing](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).",
                            "example": 174,
                            "type": "integer"
                        },
                        "current_status": {
                            "description": "Status of vehicle relative to the stops. See [GTFS-realtime VehicleStopStatus](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-vehiclestopstatus).\n\n| _**Value**_       | _**Description**_                                                                                          |\n|-------------------|------------------------------------------------------------------------------------------------------------|\n| **INCOMING_AT**   | The vehicle is just about to arrive at the stop (on a stop display, the vehicle symbol typically flashes). |\n| **STOPPED_AT**    | The vehicle is standing at the stop.                                                                       |\n| **IN_TRANSIT_TO** | The vehicle has departed the previous stop and is in transit.                                              |\n\n",
                            "example": "IN_TRANSIT_TO",
                            "type": "string"
                        },
                        "current_stop_sequence": {
                            "description": "Index of current stop along trip. See [GTFS-realtime VehiclePosition current_stop_sequence](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-vehicleposition)",
                            "example": 8,
                            "type": "integer"
                        },
                        "direction_id": {
                            "description": "Direction in which trip is traveling: `0` or `1`.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n",
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        "label": {
                            "description": "User visible label, such as the one of on the signage on the vehicle.  See [GTFS-realtime VehicleDescriptor label](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-vehicledescriptor).",
                            "example": "1817",
                            "type": "string"
                        },
                        "latitude": {
                            "description": "Latitude of the vehicle's current position. Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS-realtime Position latitude](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).",
                            "example": -71.27239990234375,
                            "type": "number"
                        },
                        "longitude": {
                            "description": "Longitude of the vehicle's current position.  Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See [GTFS-realtime Position longitude](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).",
                            "example": 42.32941818237305,
                            "type": "number"
                        },
                        "occupancy_status": {
                            "description": "The degree of passenger occupancy for the vehicle. See [GTFS-realtime OccupancyStatus](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-vehiclestopstatus).\n\n| _**Value**_                    | _**Description**_                                                                                   |\n|--------------------------------|-----------------------------------------------------------------------------------------------------|\n| **MANY_SEATS_AVAILABLE**       | Not crowded: the vehicle has a large percentage of seats available. |\n| **FEW_SEATS_AVAILABLE**        | Some crowding: the vehicle has a small percentage of seats available. |\n| **FULL**                       | Crowded: the vehicle is considered full by most measures, but may still be allowing passengers to board. |\n\n",
                            "example": "FEW_SEATS_AVAILABLE",
                            "type": "string",
                            "x-nullable": true
                        },
                        "speed": {
                            "description": "Speed that the vehicle is traveling in meters per second. See [GTFS-realtime Position speed](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).",
                            "example": 16,
                            "type": "number"
                        },
                        "updated_at": {
                            "description": "Time at which vehicle information was last updated. Format is ISO8601.",
                            "example": "2017-08-14T16:04:44-04:00",
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "id": {
                    "description": "The JSON-API resource ID",
                    "type": "string"
                },
                "links": {
                    "properties": {},
                    "type": "object"
                },
                "relationships": {
                    "properties": {
                        "route": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related route resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related route resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related route link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for route",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "stop": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related stop resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related stop resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related stop link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for stop",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "trip": {
                            "properties": {
                                "data": {
                                    "properties": {
                                        "id": {
                                            "description": "Related trip resource id",
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "Type of related trip resource",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "links": {
                                    "properties": {
                                        "related": {
                                            "description": "Related trip link",
                                            "type": "string"
                                        },
                                        "self": {
                                            "description": "Relationship link for trip",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "description": "The JSON-API resource type",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Vehicles": {
            "description": "A page of [VehicleResource](#vehicleresource) results",
            "properties": {
                "data": {
                    "description": "Content with [VehicleResource](#vehicleresource) objects",
                    "items": {
                        "$ref": "#/definitions/VehicleResource"
                    },
                    "type": "array"
                },
                "links": {
                    "properties": {
                        "first": {
                            "description": "Link to the first page of results",
                            "type": "string"
                        },
                        "last": {
                            "description": "Link to the last page of results",
                            "type": "string"
                        },
                        "next": {
                            "description": "Link to the next page of results",
                            "type": "string"
                        },
                        "prev": {
                            "description": "Link to the previous page of results",
                            "type": "string"
                        },
                        "self": {
                            "description": "Link to this page of results",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "data"
            ],
            "type": "object"
        }
    },
    "info": {
        "contact": {
            "email": "developer@mbta.com",
            "name": "MBTA Developer",
            "url": "https://groups.google.com/forum/#!forum/massdotdevelopers"
        },
        "description": "MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api",
        "license": {
            "name": "MassDOT Developer's License Agreement",
            "url": "http://www.massdot.state.ma.us/Portals/0/docs/developers/develop_license_agree.pdf"
        },
        "termsOfService": "http://www.massdot.state.ma.us/DevelopersData.aspx",
        "title": "MBTA",
        "version": "3.0"
    },
    "paths": {
        "/alerts": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List active and upcoming system alerts\n\nAn effect (enumerated in `/data/{index}/attributes/effect` and human-readable in `/data/{index}/attributes/service_effect`) on a provided service (facility, route, route type, stop and/or trip in `//data/{index}/attributes/informed_entity`) described by a banner (`/data/{index}/attributes/banner`), short header (`/data/{index}/attributes/short_header`), header `/data/{index}/attributes/header`, and description (`/data/{index}/attributes/description`) that is active for one or more periods (`/data/{index}/attributes/active_period`) caused by a cause (`/data/{index}/attribute/cause`) that somewhere in its lifecycle (enumerated in `/data/{index}/attributes/lifecycle` and human-readable in `/data/{index}/attributes/timeframe`).\n\nSee [GTFS Realtime `FeedMessage` `FeedEntity` `Alert`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)\n\n## Descriptions\n\nThere are 5 descriptive attributes.\n\n| JSON pointer                                | Usage                                                                           |\n|---------------------------------------------|---------------------------------------------------------------------------------|\n| `/data/{index}/attributes/banner`       | Display as alert across application/website                                     |\n| `/data/{index}/attributes/short_header` | When `/data/{index}/attributes/header` is too long to display               |\n| `/data/{index}/attributes/header`       | Used before showing and prepended to `/data/{index}/attributes/description` |\n| `/data/{index}/attributes/description`  | Used when user asks to expand alert.                                            |\n\n## Effect\n\n| JSON pointer                                  |                |\n|-----------------------------------------------|----------------|\n| `/data/{index}/attributes/effect`         | Enumerated     |\n| `/data/{index}/attributes/service_effect` | Human-readable |\n\n## Timeline\n\nThere are 3 timeline related attributes\n\n| JSON pointer                                 | Description                                                                              |\n|----------------------------------------------|------------------------------------------------------------------------------------------|\n| `/data/{index}/attributes/active_period` | Exact Date/Time ranges alert is active                                                   |\n| `/data/{index}/attributes/lifecycle`     | Enumerated, machine-readable description of `/data/{index}/attributes/active_period` |\n| `/data/{index}/attributes/timeframe`     | Human-readable description of `/data/{index}/attributes/active_period`               |\n\n\n## Activities\n\nAlerts are by default filtered to those where `/data/{index}/attributes/informed_entity/{informed_entity_index}/activities/{activity_index}` in one of BOARDEXITRIDE, as these cover most riders.  If you want all alerts without filtering by activity, you should use the special value `\"ALL\"`: `filter[activity]=ALL`.\n\n### Accessibility\n\nThe default activities cover if boarding, exiting, or riding is generally affected for all riders by the alert. If ONLY wheelchair using riders are affected, such as if a ramp, lift, or safety system for wheelchairs is affected, only the `\"USING_WHEELCHAIR\"` activity will be set. To cover wheelchair using rider, filter on the defaults and `\"USING_WHEELCHAIR\"`: `filter[activity]=USING_WHEELCHAIR,BOARD,EXIT,RIDE`.\n\nSimilarly for riders with limited mobility that need escalators, `\"USING_ESCALATOR\"` should be added to the defaults: `filter[activity]=USING_ESCALATOR,BOARD,EXIT,RIDE`.\n\n",
                "operationId": "ApiWeb.AlertController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/active_period` | ascending | `active_period` |\n| `/data/{index}/attributes/active_period` | descending | `-active_period` |\n| `/data/{index}/attributes/banner` | ascending | `banner` |\n| `/data/{index}/attributes/banner` | descending | `-banner` |\n| `/data/{index}/attributes/cause` | ascending | `cause` |\n| `/data/{index}/attributes/cause` | descending | `-cause` |\n| `/data/{index}/attributes/created_at` | ascending | `created_at` |\n| `/data/{index}/attributes/created_at` | descending | `-created_at` |\n| `/data/{index}/attributes/description` | ascending | `description` |\n| `/data/{index}/attributes/description` | descending | `-description` |\n| `/data/{index}/attributes/effect` | ascending | `effect` |\n| `/data/{index}/attributes/effect` | descending | `-effect` |\n| `/data/{index}/attributes/effect_name` | ascending | `effect_name` |\n| `/data/{index}/attributes/effect_name` | descending | `-effect_name` |\n| `/data/{index}/attributes/header` | ascending | `header` |\n| `/data/{index}/attributes/header` | descending | `-header` |\n| `/data/{index}/attributes/informed_entity` | ascending | `informed_entity` |\n| `/data/{index}/attributes/informed_entity` | descending | `-informed_entity` |\n| `/data/{index}/attributes/lifecycle` | ascending | `lifecycle` |\n| `/data/{index}/attributes/lifecycle` | descending | `-lifecycle` |\n| `/data/{index}/attributes/service_effect` | ascending | `service_effect` |\n| `/data/{index}/attributes/service_effect` | descending | `-service_effect` |\n| `/data/{index}/attributes/severity` | ascending | `severity` |\n| `/data/{index}/attributes/severity` | descending | `-severity` |\n| `/data/{index}/attributes/short_header` | ascending | `short_header` |\n| `/data/{index}/attributes/short_header` | descending | `-short_header` |\n| `/data/{index}/attributes/timeframe` | ascending | `timeframe` |\n| `/data/{index}/attributes/timeframe` | descending | `-timeframe` |\n| `/data/{index}/attributes/updated_at` | ascending | `updated_at` |\n| `/data/{index}/attributes/updated_at` | descending | `-updated_at` |\n| `/data/{index}/attributes/url` | ascending | `url` |\n| `/data/{index}/attributes/url` | descending | `-url` |\n\n",
                        "enum": [
                            "active_period",
                            "-active_period",
                            "banner",
                            "-banner",
                            "cause",
                            "-cause",
                            "created_at",
                            "-created_at",
                            "description",
                            "-description",
                            "effect",
                            "-effect",
                            "effect_name",
                            "-effect_name",
                            "header",
                            "-header",
                            "informed_entity",
                            "-informed_entity",
                            "lifecycle",
                            "-lifecycle",
                            "service_effect",
                            "-service_effect",
                            "severity",
                            "-severity",
                            "short_header",
                            "-short_header",
                            "timeframe",
                            "-timeframe",
                            "updated_at",
                            "-updated_at",
                            "url",
                            "-url"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[alert]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `stops`\n* `routes`\n* `trips`\n* `facilities`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "BOARD,EXIT,RIDE",
                        "description": "Filter to alerts for only those activities (`/data/{index}/attributes/informed_entity/activities/{activity_index}`) matching.  Multiple activities\n**MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nAn activity affected by an alert.\n\n| Value                | Description                                                                                                                                                                                                                                                                       |\n|----------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `\"BOARD\"`            | Boarding a vehicle. Any passenger trip includes boarding a vehicle and exiting from a vehicle.                                                                                                                                                                                    |\n| `\"BRINGING_BIKE\"`    | Bringing a bicycle while boarding or exiting.                                                                                                                                                                                                                                     |\n| `\"EXIT\"`             | Exiting from a vehicle (disembarking). Any passenger trip includes boarding a vehicle and exiting a vehicle.                                                                                                                                                                      |\n| `\"PARK_CAR\"`         | Parking a car at a garage or lot in a station.                                                                                                                                                                                                                                    |\n| `\"RIDE\"`             | Riding through a stop without boarding or exiting.. Not every passenger trip will include this -- a passenger may board at one stop and exit at the next stop.                                                                                                                    |\n| `\"STORE_BIKE\"`       | Storing a bicycle at a station.                                                                                                                                                                                                                                                   |\n| `\"USING_ESCALATOR\"`  | Using an escalator while boarding or exiting (should only be used for customers who specifically want to avoid stairs.)                                                                                                                                                           |\n| `\"USING_WHEELCHAIR\"` | Using a wheelchair while boarding or exiting. Note that this applies to something that specifically affects customers who use a wheelchair to board or exit; a delay should not include this as an affected activity unless it specifically affects customers using wheelchairs.  |\n\n\n## Special Values\n\n* If the filter is not given OR it is empty, then defaults to [\"BOARD\", \"EXIT\", \"RIDE\"].\n* If the value `\"ALL\"` is used then all alerts will be returned, not just those with the default activities.\n\n## Accessibility\n\nThe default activities cover if boarding, exiting, or riding is generally affected for all riders by the alert. If ONLY wheelchair using riders are affected, such as if a ramp, lift, or safety system for wheelchairs is affected, only the `\"USING_WHEELCHAIR\"` activity will be set. To cover wheelchair using rider, filter on the defaults and `\"USING_WHEELCHAIR\"`: `filter[activity]=USING_WHEELCHAIR,BOARD,EXIT,RIDE`.\n\nSimilarly for riders with limited mobility that need escalators, `\"USING_ESCALATOR\"` should be added to the defaults: `filter[activity]=USING_ESCALATOR,BOARD,EXIT,RIDE`.\n\n",
                        "in": "query",
                        "name": "filter[activity]",
                        "required": false,
                        "type": "string",
                        "x-example": "BOARD,EXIT"
                    },
                    {
                        "description": "Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.\n\nMultiple `route_type` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "enum": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4"
                        ],
                        "in": "query",
                        "name": "filter[route_type]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\n\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/route/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/stop/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nParent station IDs are treated as though their child stops were also included. \n",
                        "in": "query",
                        "includes_children": true,
                        "name": "filter[stop]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/trip/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[trip]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/facility/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[facility]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by multiple IDs. Multiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string",
                        "x-example": "1,2"
                    },
                    {
                        "description": "When combined with other filters, filters by alerts with or without a banner. **MUST** be \"true\" or \"false\".\n",
                        "in": "query",
                        "name": "filter[banner]",
                        "required": false,
                        "type": "string",
                        "x-example": "true"
                    },
                    {
                        "description": "Filter to alerts that are active at a given time (ISO8601 format).\n\nAdditionally, the string \"NOW\" can be used to filter to alerts that are currently active.\n",
                        "in": "query",
                        "name": "filter[datetime]",
                        "required": false,
                        "type": "string",
                        "x-example": "2018-05-09T13:06:00-04:00"
                    },
                    {
                        "description": "Filters by an alert's lifecycle. **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[lifecycle]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filters alerts by list of severities. **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nExample: filter[severity]=3,4,10 returns alerts with severity levels 3, 4 and 10.\n",
                        "in": "query",
                        "name": "filter[severity]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Alerts"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Alert"
                ]
            }
        },
        "/alerts/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Show a particular alert by the alert's id\n\nAn effect (enumerated in `/data/attributes/effect` and human-readable in `/data/attributes/service_effect`) on a provided service (facility, route, route type, stop and/or trip in `//data/attributes/informed_entity`) described by a banner (`/data/attributes/banner`), short header (`/data/attributes/short_header`), header `/data/attributes/header`, and description (`/data/attributes/description`) that is active for one or more periods (`/data/attributes/active_period`) caused by a cause (`/data/attribute/cause`) that somewhere in its lifecycle (enumerated in `/data/attributes/lifecycle` and human-readable in `/data/attributes/timeframe`).\n\nSee [GTFS Realtime `FeedMessage` `FeedEntity` `Alert`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-alert)\n\n## Descriptions\n\nThere are 5 descriptive attributes.\n\n| JSON pointer                                | Usage                                                                           |\n|---------------------------------------------|---------------------------------------------------------------------------------|\n| `/data/attributes/banner`       | Display as alert across application/website                                     |\n| `/data/attributes/short_header` | When `/data/attributes/header` is too long to display               |\n| `/data/attributes/header`       | Used before showing and prepended to `/data/attributes/description` |\n| `/data/attributes/description`  | Used when user asks to expand alert.                                            |\n\n## Effect\n\n| JSON pointer                                  |                |\n|-----------------------------------------------|----------------|\n| `/data/attributes/effect`         | Enumerated     |\n| `/data/attributes/service_effect` | Human-readable |\n\n## Timeline\n\nThere are 3 timeline related attributes\n\n| JSON pointer                                 | Description                                                                              |\n|----------------------------------------------|------------------------------------------------------------------------------------------|\n| `/data/attributes/active_period` | Exact Date/Time ranges alert is active                                                   |\n| `/data/attributes/lifecycle`     | Enumerated, machine-readable description of `/data/attributes/active_period` |\n| `/data/attributes/timeframe`     | Human-readable description of `/data/attributes/active_period`               |\n\n",
                "operationId": "ApiWeb.AlertController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for alert",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[alert]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `stops`\n* `routes`\n* `trips`\n* `facilities`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Alert"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Alert"
                ]
            }
        },
        "/facilities": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List Escalators and Elevators\n\nAmenities at a station stop (`/data/relationships/stop`) such as elevators, escalators, parking lots, and bike storage.\n\nAn [MBTA extension](https://groups.google.com/forum/#!topic/gtfs-changes/EzC5m9k45pA).  This spec is not yet finalized.\n\n## Accessibility\n\nRiders with limited mobility can search any facility, either `ELEVATOR` or `ESCALATOR`, while riders that need wheelchair access can search for `ELEVATOR` only.\n\nThe lack of an `ELEVATOR` MAY NOT make a stop wheelchair inaccessible.  Riders should check `/stops/{id}` `/data/attributes/wheelchair_boarding` is `1` to guarantee a path is available from the station entrance to the stop or `0` if it MAY be accessible.  Completely avoid `2` as that is guaranteed to be INACCESSIBLE.\n\n",
                "operationId": "ApiWeb.FacilityController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/latitude` | ascending | `latitude` |\n| `/data/{index}/attributes/latitude` | descending | `-latitude` |\n| `/data/{index}/attributes/long_name` | ascending | `long_name` |\n| `/data/{index}/attributes/long_name` | descending | `-long_name` |\n| `/data/{index}/attributes/longitude` | ascending | `longitude` |\n| `/data/{index}/attributes/longitude` | descending | `-longitude` |\n| `/data/{index}/attributes/properties` | ascending | `properties` |\n| `/data/{index}/attributes/properties` | descending | `-properties` |\n| `/data/{index}/attributes/short_name` | ascending | `short_name` |\n| `/data/{index}/attributes/short_name` | descending | `-short_name` |\n| `/data/{index}/attributes/type` | ascending | `type` |\n| `/data/{index}/attributes/type` | descending | `-type` |\n\n",
                        "enum": [
                            "latitude",
                            "-latitude",
                            "long_name",
                            "-long_name",
                            "longitude",
                            "-longitude",
                            "properties",
                            "-properties",
                            "short_name",
                            "-short_name",
                            "type",
                            "-type"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[facility]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `stop`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/stop/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[stop]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by type. Multiple types **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[type]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Facilities"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Facility"
                ]
            }
        },
        "/facilities/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Specific Escalator or Elevator\n\nAmenities at a station stop (`/data/{index}/relationships/stop`) such as elevators, escalators, parking lots, and bike storage.\n\nAn [MBTA extension](https://groups.google.com/forum/#!topic/gtfs-changes/EzC5m9k45pA).  This spec is not yet finalized.\n\n## Accessibility\n\nRiders with limited mobility can search any facility, either `ELEVATOR` or `ESCALATOR`, while riders that need wheelchair access can search for `ELEVATOR` only.\n\nThe lack of an `ELEVATOR` MAY NOT make a stop wheelchair inaccessible.  Riders should check `/stops/{id}` `/data/attributes/wheelchair_boarding` is `1` to guarantee a path is available from the station entrance to the stop or `0` if it MAY be accessible.  Completely avoid `2` as that is guaranteed to be INACCESSIBLE.\n\n",
                "operationId": "ApiWeb.FacilityController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for facility",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[facility]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `stop`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Facility"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Facility"
                ]
            }
        },
        "/lines": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List of lines. A line is a combination of routes. This concept can be used to group similar routes when displaying them to customers, such as for routes which serve the same trunk corridor or bus terminal.\n",
                "operationId": "ApiWeb.LineController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/color` | ascending | `color` |\n| `/data/{index}/attributes/color` | descending | `-color` |\n| `/data/{index}/attributes/long_name` | ascending | `long_name` |\n| `/data/{index}/attributes/long_name` | descending | `-long_name` |\n| `/data/{index}/attributes/short_name` | ascending | `short_name` |\n| `/data/{index}/attributes/short_name` | descending | `-short_name` |\n| `/data/{index}/attributes/sort_order` | ascending | `sort_order` |\n| `/data/{index}/attributes/sort_order` | descending | `-sort_order` |\n| `/data/{index}/attributes/text_color` | ascending | `text_color` |\n| `/data/{index}/attributes/text_color` | descending | `-text_color` |\n\n",
                        "enum": [
                            "color",
                            "-color",
                            "long_name",
                            "-long_name",
                            "short_name",
                            "-short_name",
                            "sort_order",
                            "-sort_order",
                            "text_color",
                            "-text_color"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[line]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `routes`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by multiple IDs. **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string",
                        "x-example": "1,2"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Lines"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Line"
                ]
            }
        },
        "/lines/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Single line, which represents a combination of routes.\n",
                "operationId": "ApiWeb.LineController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for a line",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[line]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `routes`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Lines"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Line"
                ]
            }
        },
        "/live_facilities": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Live Facility Data\n\nLive data about a given facility.\n\n",
                "operationId": "ApiWeb.LiveFacilityController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/properties` | ascending | `properties` |\n| `/data/{index}/attributes/properties` | descending | `-properties` |\n| `/data/{index}/attributes/updated_at` | ascending | `updated_at` |\n| `/data/{index}/attributes/updated_at` | descending | `-updated_at` |\n\n",
                        "enum": [
                            "properties",
                            "-properties",
                            "updated_at",
                            "-updated_at"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `facility`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by multiple parking facility ids. **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LiveFacility"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "LiveFacility"
                ]
            }
        },
        "/live_facilities/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List live parking data for specific parking facility\n\nLive data about a given facility.\n\n",
                "operationId": "ApiWeb.LiveFacilityController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for facility",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `facility`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LiveFacility"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "LiveFacility"
                ]
            }
        },
        "/predictions": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "**NOTE:** A filter **MUST** be present for any predictions to be returned.\n\nList of predictions for trips.  To get the scheduled times instead of the predictions, use `/schedules`.\n\nThe predicted arrival time (`//data/{index}/attributes/arrival_time`) and departure time (`/data/{index}/attributes/departure_time`) to/from a stop (`/data/{index}/relationships/stop/data/id`) at a given sequence (`/data/{index}/attriutes/stop_sequence`) along a trip (`/data/{index}/relationships/trip/data/id`) going a direction (`/data/{index}/attributes/direction_id`) along a route (`/data/{index}/relationships/route/data/id`).\n\nSee [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `TripDescriptor`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-tripdescriptor)\nSee [GTFS Realtime `FeedMesage` `FeedEntity` `TripUpdate` `StopTimeUpdate`](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeupdate)\n\n\n## When a vehicle is predicted to be at a stop\n\n`/predictions?filter[stop]=STOP_ID`\n\n## The predicted schedule for one route\n\n`/predictions?filter[route]=ROUTE_ID`\n\n## The predicted schedule for a whole trip\n\n`/predictions?filter[trip]=TRIP_ID`\n\n",
                "operationId": "ApiWeb.PredictionController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key.\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/arrival_time` | ascending | `arrival_time` |\n| `/data/{index}/attributes/arrival_time` | descending | `-arrival_time` |\n| `/data/{index}/attributes/departure_time` | ascending | `departure_time` |\n| `/data/{index}/attributes/departure_time` | descending | `-departure_time` |\n| `/data/{index}/attributes/direction_id` | ascending | `direction_id` |\n| `/data/{index}/attributes/direction_id` | descending | `-direction_id` |\n| `/data/{index}/attributes/schedule_relationship` | ascending | `schedule_relationship` |\n| `/data/{index}/attributes/schedule_relationship` | descending | `-schedule_relationship` |\n| `/data/{index}/attributes/status` | ascending | `status` |\n| `/data/{index}/attributes/status` | descending | `-status` |\n| `/data/{index}/attributes/stop_sequence` | ascending | `stop_sequence` |\n| `/data/{index}/attributes/stop_sequence` | descending | `-stop_sequence` |\n | `/data/{index}/attributes/arrival_time` if present, otherwise `/data/{index}/attributes/departure_time` | ascending | `time` |\n| `/data/{index}/attributes/arrival_time` if present, otherwise `/data/{index}/attributes/departure_time` | descending | `-time` |\n\n",
                        "enum": [
                            "arrival_time",
                            "-arrival_time",
                            "departure_time",
                            "-departure_time",
                            "direction_id",
                            "-direction_id",
                            "schedule_relationship",
                            "-schedule_relationship",
                            "status",
                            "-status",
                            "stop_sequence",
                            "-stop_sequence",
                            "time",
                            "-time"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[prediction]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `schedule`\n* `stop`\n* `route`\n* `trip`\n* `vehicle`\n* `alerts`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n## Example\n\n`https://api-v3.mbta.com/predictions?filter%5Bstop%5D=place-sstat&filter%5Bdirection_id%5D=0&include=stop`\nreturns predictions from South Station with direction_id=0, below is a truncated response with only relevant fields displayed:\n```\n  {\n    \"data\": [\n      {\n        \"id\": \"prediction-CR-Weekday-Fall-18-743-South Station-02-1\",\n        \"relationships\": {\n          \"stop\": {\n            \"data\": {\n              \"id\": \"South Station-02\",\n              \"type\": \"stop\"\n            }\n          },\n        },\n        \"type\": \"prediction\"\n      }\n    ],\n    \"included\": [\n      {\n        \"attributes\": {\n          \"platform_code\": \"2\",\n        },\n        \"id\": \"South Station-02\",\n        \"type\": \"stop\"\n      }\n    ],\n  }\n```\nNote the stop relationship; use it to cross-reference  stop-id with the included stops to retrieve the platform_code for the given prediction.\n\n## Note on trips\nA Vehicle's `trip` is what is currently being served.\n\nA Prediction also has a `vehicle`: this is the vehicle we predict will serve this trip/stop.\n\nSince we know vehicles make future trips, the trip the vehicle is currently servicing can be different from the trips we're making predictions for.\n\nFor example:\n* Vehicle 1234 is currently serving trip A\n* The block is Trip A \u2192 Trip B \u2192 Trip C\n\nWe'll be making predictions for the rest of trip A, as well as all the stops of trip B and trip C. The `trip` for the Vehicle is always `A`, and all of the Predictions will reference Vehicle 1234.\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": " Latitude/Longitude must be both present or both absent.",
                        "in": "query",
                        "name": "filter[latitude]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": " Latitude/Longitude must be both present or both absent.",
                        "in": "query",
                        "name": "filter[longitude]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": " Radius accepts a floating point number, and the default is 0.01.  For example, if you query for: latitude: 42,  longitude: -71,  radius: 0.05 then you will filter between latitudes 41.95 and 42.05, and longitudes -70.95 and -71.05.",
                        "format": "date",
                        "in": "query",
                        "name": "filter[radius]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\n\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.\n\nMultiple `route_type` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nMust be used in conjunction with another filter.\n",
                        "enum": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4"
                        ],
                        "in": "query",
                        "name": "filter[route_type]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/stop/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nParent station IDs are treated as though their child stops were also included. \n",
                        "in": "query",
                        "includes_children": true,
                        "name": "filter[stop]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/route/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/trip/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[trip]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/included/{index}/relationships/route_pattern/data/id` of a trip. Multiple `route_pattern_id` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[route_pattern]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Predictions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Prediction"
                ]
            }
        },
        "/route_patterns": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List of route patterns.\n\nRoute patterns are used to describe the subsets of a route, representing different possible patterns of where trips may serve. For example, a bus route may have multiple branches, and each branch may be modeled as a separate route pattern per direction. Hierarchically, the route pattern level may be considered to be larger than the trip level and smaller than the route level.\n\nFor most MBTA modes, a route pattern will typically represent a unique set of stops that may be served on a route-trip combination. Seasonal schedule changes may result in trips within a route pattern having different routings. In simple changes, such a single bus stop removed or added between one schedule rating and the next (for example, between the Summer and Fall schedules), trips will be maintained on the same route_pattern_id. If the changes are significant, a new route_pattern_id may be introduced.\n\nFor Commuter Rail, express or skip-stop trips use the same route pattern as local trips. Some branches do have multiple route patterns when the train takes a different path. For example, `CR-Providence` has two route patterns per direction, one for the Wickford Junction branch and the other for the Stoughton branch.\n\n",
                "operationId": "ApiWeb.RoutePatternController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/direction_id` | ascending | `direction_id` |\n| `/data/{index}/attributes/direction_id` | descending | `-direction_id` |\n| `/data/{index}/attributes/name` | ascending | `name` |\n| `/data/{index}/attributes/name` | descending | `-name` |\n| `/data/{index}/attributes/sort_order` | ascending | `sort_order` |\n| `/data/{index}/attributes/sort_order` | descending | `-sort_order` |\n| `/data/{index}/attributes/time_desc` | ascending | `time_desc` |\n| `/data/{index}/attributes/time_desc` | descending | `-time_desc` |\n| `/data/{index}/attributes/typicality` | ascending | `typicality` |\n| `/data/{index}/attributes/typicality` | descending | `-typicality` |\n\n",
                        "enum": [
                            "direction_id",
                            "-direction_id",
                            "name",
                            "-name",
                            "sort_order",
                            "-sort_order",
                            "time_desc",
                            "-time_desc",
                            "typicality",
                            "-typicality"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `route`\n* `representative_trip`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n| include | Description |\n|-|-|\n| `route` | The route that this pattern belongs to. |\n| `representative_trip` | A trip that can be considered a canonical trip for the route pattern. This trip can be used to deduce a pattern's canonical set of stops and shape. |\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by multiple IDs. **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string",
                        "x-example": "Red-1-0,Red-1-1"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/route/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\n\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/stop/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nParent station IDs are treated as though their child stops were also included. \n",
                        "in": "query",
                        "includes_children": true,
                        "name": "filter[stop]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoutePattern"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "RoutePattern"
                ]
            }
        },
        "/route_patterns/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Show a particular route_pattern by the route's id.\n\nRoute patterns are used to describe the subsets of a route, representing different possible patterns of where trips may serve. For example, a bus route may have multiple branches, and each branch may be modeled as a separate route pattern per direction. Hierarchically, the route pattern level may be considered to be larger than the trip level and smaller than the route level.\n\nFor most MBTA modes, a route pattern will typically represent a unique set of stops that may be served on a route-trip combination. Seasonal schedule changes may result in trips within a route pattern having different routings. In simple changes, such a single bus stop removed or added between one schedule rating and the next (for example, between the Summer and Fall schedules), trips will be maintained on the same route_pattern_id. If the changes are significant, a new route_pattern_id may be introduced.\n\nFor Commuter Rail, express or skip-stop trips use the same route pattern as local trips. Some branches do have multiple route patterns when the train takes a different path. For example, `CR-Providence` has two route patterns per direction, one for the Wickford Junction branch and the other for the Stoughton branch.\n\n",
                "operationId": "ApiWeb.RoutePatternController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for route_pattern",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `route`\n* `representative_trip`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n| include | Description |\n|-|-|\n| `route` | The route that this pattern belongs to. |\n| `representative_trip` | A trip that can be considered a canonical trip for the route pattern. This trip can be used to deduce a pattern's canonical set of stops and shape. |\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RoutePattern"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "RoutePattern"
                ]
            }
        },
        "/routes": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List of routes.\n\n## Names and Descriptions\n\nThere are 3 attributes with increasing details for naming and describing the route.\n\n1. `/data/{index}/attributes/short_name`\n2. `/data/{index}/attributes/long_name`\n3. `/data/{index}/attributes/description`\n\n## Directions\n\n`/data/{index}/attributes/direction_names` is the only place to convert the `direction_id` used throughout the rest of the API to human-readable names.\n\n## Type\n\n`/data/{index}/attributes/type` corresponds to [GTFS `routes.txt` `route_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt).\n\n| Value | Name          | Example    |\n|-------|---------------|------------|\n| `0`   | Light Rail    | Green Line |\n| `1`   | Heavy Rail    | Red Line   |\n| `2`   | Commuter Rail |            |\n| `3`   | Bus           |            |\n| `4`   | Ferry         |            |\n\n\n",
                "operationId": "ApiWeb.RouteController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/color` | ascending | `color` |\n| `/data/{index}/attributes/color` | descending | `-color` |\n| `/data/{index}/attributes/description` | ascending | `description` |\n| `/data/{index}/attributes/description` | descending | `-description` |\n| `/data/{index}/attributes/direction_destinations` | ascending | `direction_destinations` |\n| `/data/{index}/attributes/direction_destinations` | descending | `-direction_destinations` |\n| `/data/{index}/attributes/direction_names` | ascending | `direction_names` |\n| `/data/{index}/attributes/direction_names` | descending | `-direction_names` |\n| `/data/{index}/attributes/fare_class` | ascending | `fare_class` |\n| `/data/{index}/attributes/fare_class` | descending | `-fare_class` |\n| `/data/{index}/attributes/long_name` | ascending | `long_name` |\n| `/data/{index}/attributes/long_name` | descending | `-long_name` |\n| `/data/{index}/attributes/short_name` | ascending | `short_name` |\n| `/data/{index}/attributes/short_name` | descending | `-short_name` |\n| `/data/{index}/attributes/sort_order` | ascending | `sort_order` |\n| `/data/{index}/attributes/sort_order` | descending | `-sort_order` |\n| `/data/{index}/attributes/text_color` | ascending | `text_color` |\n| `/data/{index}/attributes/text_color` | descending | `-text_color` |\n| `/data/{index}/attributes/type` | ascending | `type` |\n| `/data/{index}/attributes/type` | descending | `-type` |\n\n",
                        "enum": [
                            "color",
                            "-color",
                            "description",
                            "-description",
                            "direction_destinations",
                            "-direction_destinations",
                            "direction_names",
                            "-direction_names",
                            "fare_class",
                            "-fare_class",
                            "long_name",
                            "-long_name",
                            "short_name",
                            "-short_name",
                            "sort_order",
                            "-sort_order",
                            "text_color",
                            "-text_color",
                            "type",
                            "-type"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `stop`\n* `line`\n* `route_patterns`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n`stop` can only be included when `filter[stop]` is also specified.\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/stop/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[stop]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "| Value | Name          | Example    |\n|-------|---------------|------------|\n| `0`   | Light Rail    | Green Line |\n| `1`   | Heavy Rail    | Red Line   |\n| `2`   | Commuter Rail |            |\n| `3`   | Bus           |            |\n| `4`   | Ferry         |            |\n\n\nMultiple `route_type` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[type]",
                        "required": false,
                        "type": "string",
                        "x-example": 0
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\nWhen combined with stop_id, filters by routes which stop at that stop when traveling in a particular direction\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by date that route is active The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.",
                        "format": "date",
                        "in": "query",
                        "name": "filter[date]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by multiple IDs. Multiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string",
                        "x-example": "1,2"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Routes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Route"
                ]
            }
        },
        "/routes/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Show a particular route by the route's id.\n\n## Names and Descriptions\n\nThere are 3 attributes with increasing details for naming and describing the route.\n\n1. `/data/attributes/short_name`\n2. `/data/attributes/long_name`\n3. `/data/attributes/description`\n\n## Directions\n\n`/data/attributes/direction_names` is the only place to convert the `direction_id` used throughout the rest of the API to human-readable names.\n\n## Type\n\n`/data/attributes/type` corresponds to [GTFS `routes.txt` `route_type`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#routestxt).\n\n| Value | Name          | Example    |\n|-------|---------------|------------|\n| `0`   | Light Rail    | Green Line |\n| `1`   | Heavy Rail    | Red Line   |\n| `2`   | Commuter Rail |            |\n| `3`   | Bus           |            |\n| `4`   | Ferry         |            |\n\n\n",
                "operationId": "ApiWeb.RouteController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for route",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `line`\n* `route_patterns`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Route"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Route"
                ]
            }
        },
        "/schedules": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "**NOTE:** `filter[route]`, `filter[stop]`, or `filter[trip]` **MUST** be present for any schedules to be returned.\n\nList of schedules.  To get a realtime prediction instead of the scheduled times, use `/predictions`.\n\nA schedule is the arrival drop off (`/data/{index}/attributes/drop_off_type`) time (`/data/{index}/attributes/arrival_time`) and departure pick up (`/data/{index}/attributes/pickup_type`) time (`/data/{index}/attributes/departure_time`) to/from a stop (`/data/{index}/relationships/stop/data/id`) at a given sequence (`/data/{index}/attributes/stop_sequence`) along a trip (`/data/{index}/relationships/trip/data/id`) going in a direction (`/data/{index}/attributes/direction_id`) on a route (`/data/{index}/relationships/route/data/id`) when the trip is following a service (`/data/{index}/relationships/service/data/id`) to determine when it is active.\n\nSee [GTFS `stop_times.txt`](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stop_timestxt) for base specification.\n\n\n## When a vehicle is scheduled to be at a stop\n\n`/schedules?filter[stop]=STOP_ID`\n\n## The schedule for one route\n\n`/schedules?filter[route]=ROUTE_ID`\n\n### When a route is open\n\nQuery for the `first` and `last` stops on the route.\n\n`/schedules?filter[route]=ROUTE_ID&filter[stop_sequence]=first,last`\n\n## The schedule for a whole trip\n\n`/schedule?filter[trip]=TRIP_ID`\n\n",
                "operationId": "ApiWeb.ScheduleController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key.\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/arrival_time` | ascending | `arrival_time` |\n| `/data/{index}/attributes/arrival_time` | descending | `-arrival_time` |\n| `/data/{index}/attributes/departure_time` | ascending | `departure_time` |\n| `/data/{index}/attributes/departure_time` | descending | `-departure_time` |\n| `/data/{index}/attributes/direction_id` | ascending | `direction_id` |\n| `/data/{index}/attributes/direction_id` | descending | `-direction_id` |\n| `/data/{index}/attributes/drop_off_type` | ascending | `drop_off_type` |\n| `/data/{index}/attributes/drop_off_type` | descending | `-drop_off_type` |\n| `/data/{index}/attributes/pickup_type` | ascending | `pickup_type` |\n| `/data/{index}/attributes/pickup_type` | descending | `-pickup_type` |\n| `/data/{index}/attributes/stop_headsign` | ascending | `stop_headsign` |\n| `/data/{index}/attributes/stop_headsign` | descending | `-stop_headsign` |\n| `/data/{index}/attributes/stop_sequence` | ascending | `stop_sequence` |\n| `/data/{index}/attributes/stop_sequence` | descending | `-stop_sequence` |\n| `/data/{index}/attributes/timepoint` | ascending | `timepoint` |\n| `/data/{index}/attributes/timepoint` | descending | `-timepoint` |\n | `/data/{index}/attributes/arrival_time` if present, otherwise `/data/{index}/attributes/departure_time` | ascending | `time` |\n| `/data/{index}/attributes/arrival_time` if present, otherwise `/data/{index}/attributes/departure_time` | descending | `-time` |\n\n",
                        "enum": [
                            "arrival_time",
                            "-arrival_time",
                            "departure_time",
                            "-departure_time",
                            "direction_id",
                            "-direction_id",
                            "drop_off_type",
                            "-drop_off_type",
                            "pickup_type",
                            "-pickup_type",
                            "stop_headsign",
                            "-stop_headsign",
                            "stop_sequence",
                            "-stop_sequence",
                            "timepoint",
                            "-timepoint",
                            "time",
                            "-time"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[schedule]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `stop`\n* `trip`\n* `prediction`\n* `route`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter schedule by date that they are active. The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.",
                        "format": "date",
                        "in": "query",
                        "name": "filter[date]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\n\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.\n\nMultiple `route_type` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nMust be used in conjunction with another filter.\n",
                        "enum": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4"
                        ],
                        "in": "query",
                        "name": "filter[route_type]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Time before which schedule should not be returned. To filter times after midnight use more than 24 hours. For example, min_time=24:00 will return schedule information for the next calendar day, since that service is considered part of the current service day. Additionally, min_time=00:00&max_time=02:00 will not return anything. The time format is HH:MM.",
                        "format": "time",
                        "in": "query",
                        "name": "filter[min_time]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Time after which schedule should not be returned. To filter times after midnight use more than 24 hours. For example, min_time=24:00 will return schedule information for the next calendar day, since that service is considered part of the current service day. Additionally, min_time=00:00&max_time=02:00 will not return anything. The time format is HH:MM.",
                        "format": "time",
                        "in": "query",
                        "name": "filter[max_time]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/route/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/stop/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nParent station IDs are treated as though their child stops were also included. \n",
                        "in": "query",
                        "includes_children": true,
                        "name": "filter[stop]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/trip/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[trip]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by the index of the stop in the trip.  Symbolic values `first` and `last` can be used instead of numeric sequence number too.\n",
                        "in": "query",
                        "name": "filter[stop_sequence]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Schedules"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Schedule"
                ]
            }
        },
        "/services": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List of services. Service represents the days of the week, as well as extra days, that a trip is valid.\n",
                "operationId": "ApiWeb.ServiceController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/added_dates` | ascending | `added_dates` |\n| `/data/{index}/attributes/added_dates` | descending | `-added_dates` |\n| `/data/{index}/attributes/added_dates_notes` | ascending | `added_dates_notes` |\n| `/data/{index}/attributes/added_dates_notes` | descending | `-added_dates_notes` |\n| `/data/{index}/attributes/description` | ascending | `description` |\n| `/data/{index}/attributes/description` | descending | `-description` |\n| `/data/{index}/attributes/end_date` | ascending | `end_date` |\n| `/data/{index}/attributes/end_date` | descending | `-end_date` |\n| `/data/{index}/attributes/rating_description` | ascending | `rating_description` |\n| `/data/{index}/attributes/rating_description` | descending | `-rating_description` |\n| `/data/{index}/attributes/rating_end_date` | ascending | `rating_end_date` |\n| `/data/{index}/attributes/rating_end_date` | descending | `-rating_end_date` |\n| `/data/{index}/attributes/rating_start_date` | ascending | `rating_start_date` |\n| `/data/{index}/attributes/rating_start_date` | descending | `-rating_start_date` |\n| `/data/{index}/attributes/removed_dates` | ascending | `removed_dates` |\n| `/data/{index}/attributes/removed_dates` | descending | `-removed_dates` |\n| `/data/{index}/attributes/removed_dates_notes` | ascending | `removed_dates_notes` |\n| `/data/{index}/attributes/removed_dates_notes` | descending | `-removed_dates_notes` |\n| `/data/{index}/attributes/schedule_name` | ascending | `schedule_name` |\n| `/data/{index}/attributes/schedule_name` | descending | `-schedule_name` |\n| `/data/{index}/attributes/schedule_type` | ascending | `schedule_type` |\n| `/data/{index}/attributes/schedule_type` | descending | `-schedule_type` |\n| `/data/{index}/attributes/schedule_typicality` | ascending | `schedule_typicality` |\n| `/data/{index}/attributes/schedule_typicality` | descending | `-schedule_typicality` |\n| `/data/{index}/attributes/start_date` | ascending | `start_date` |\n| `/data/{index}/attributes/start_date` | descending | `-start_date` |\n| `/data/{index}/attributes/valid_days` | ascending | `valid_days` |\n| `/data/{index}/attributes/valid_days` | descending | `-valid_days` |\n\n",
                        "enum": [
                            "added_dates",
                            "-added_dates",
                            "added_dates_notes",
                            "-added_dates_notes",
                            "description",
                            "-description",
                            "end_date",
                            "-end_date",
                            "rating_description",
                            "-rating_description",
                            "rating_end_date",
                            "-rating_end_date",
                            "rating_start_date",
                            "-rating_start_date",
                            "removed_dates",
                            "-removed_dates",
                            "removed_dates_notes",
                            "-removed_dates_notes",
                            "schedule_name",
                            "-schedule_name",
                            "schedule_type",
                            "-schedule_type",
                            "schedule_typicality",
                            "-schedule_typicality",
                            "start_date",
                            "-start_date",
                            "valid_days",
                            "-valid_days"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[service]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by multiple IDs. **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string",
                        "x-example": "1,2"
                    },
                    {
                        "description": "Filter by route. Multiple `route` **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Services"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Service"
                ]
            }
        },
        "/services/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Single service, which represents the days of the week, as well as extra days, that a trip is valid.\n",
                "operationId": "ApiWeb.ServiceController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for a service",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[service]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Service"
                ]
            }
        },
        "/shapes": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "**NOTE:** `filter[route]` **MUST** be given for any shapes to be returned.\n\nList of shapes.\n\n## Vertices\n\n### World\n\n`/data/{index}/attributes/polyline` is in [Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), which encodes the latitude and longitude of a sequence of points in the shape.\n\n",
                "operationId": "ApiWeb.ShapeController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/polyline` | ascending | `polyline` |\n| `/data/{index}/attributes/polyline` | descending | `-polyline` |\n\n",
                        "enum": [
                            "polyline",
                            "-polyline"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[shape]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `route`\n* `stops`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/route/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Shapes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Shape"
                ]
            }
        },
        "/shapes/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Detail of a particular shape.\n\n## Vertices\n\n### World\n\n`/data/attributes/polyline` is in [Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm), which encodes the latitude and longitude of a sequence of points in the shape.\n\n",
                "operationId": "ApiWeb.ShapeController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for shape",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[shape]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `route`\n* `stops`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Shape"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Shape"
                ]
            }
        },
        "/stops": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List stops.\n\n## Accessibility\n\nWheelchair boarding (`/data/{index}/attributes/wheelchair_boarding`) corresponds to [GTFS wheelchair_boarding](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt). The MBTA handles parent station inheritance itself, so value can be treated simply:\n\n| Value | Meaning                                       |\n|-------|-----------------------------------------------|\n| `0`   | No Information                                |\n| `1`   | Accessible (if trip is wheelchair accessible) |\n| `2`   | Inaccessible                                  |\n\n\n## Location\n\n### World\n\nUse `/data/{index}/attributes/latitude` and `/data/{index}/attributes/longitude` to get the location of a stop.\n\n### Entrance\n\nThe stop may be inside a station.  If `/data/{index}/relationships/parent_station/data/id` is present, you should look up the parent station (`/stops/{parent_id}`) and use its location to give direction first to the parent station and then route from there to the stop.\n\n\n\n### Nearby\n\nThe `filter[latitude]` and `filter[longitude]` can be used together to find any stops near that latitude and longitude.  The distance is in degrees as if latitude and longitude were on a flat 2D plane and normal Pythagorean distance was calculated.  Over the region MBTA serves, `0.02` degrees is approximately `1` mile. How close is considered nearby, is controlled by `filter[radius]`, which default to `0.01` degrees (approximately a half mile).\n",
                "operationId": "ApiWeb.StopController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Sorting by distance requires `filter[latitude]` and `filter[longitude]` to be set. Assumes ascending; may be prefixed with '-' for descending.\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/address` | ascending | `address` |\n| `/data/{index}/attributes/address` | descending | `-address` |\n| `/data/{index}/attributes/at_street` | ascending | `at_street` |\n| `/data/{index}/attributes/at_street` | descending | `-at_street` |\n| `/data/{index}/attributes/description` | ascending | `description` |\n| `/data/{index}/attributes/description` | descending | `-description` |\n| `/data/{index}/attributes/latitude` | ascending | `latitude` |\n| `/data/{index}/attributes/latitude` | descending | `-latitude` |\n| `/data/{index}/attributes/location_type` | ascending | `location_type` |\n| `/data/{index}/attributes/location_type` | descending | `-location_type` |\n| `/data/{index}/attributes/longitude` | ascending | `longitude` |\n| `/data/{index}/attributes/longitude` | descending | `-longitude` |\n| `/data/{index}/attributes/municipality` | ascending | `municipality` |\n| `/data/{index}/attributes/municipality` | descending | `-municipality` |\n| `/data/{index}/attributes/name` | ascending | `name` |\n| `/data/{index}/attributes/name` | descending | `-name` |\n| `/data/{index}/attributes/on_street` | ascending | `on_street` |\n| `/data/{index}/attributes/on_street` | descending | `-on_street` |\n| `/data/{index}/attributes/platform_code` | ascending | `platform_code` |\n| `/data/{index}/attributes/platform_code` | descending | `-platform_code` |\n| `/data/{index}/attributes/platform_name` | ascending | `platform_name` |\n| `/data/{index}/attributes/platform_name` | descending | `-platform_name` |\n| `/data/{index}/attributes/vehicle_type` | ascending | `vehicle_type` |\n| `/data/{index}/attributes/vehicle_type` | descending | `-vehicle_type` |\n| `/data/{index}/attributes/wheelchair_boarding` | ascending | `wheelchair_boarding` |\n| `/data/{index}/attributes/wheelchair_boarding` | descending | `-wheelchair_boarding` |\n | Distance to (`/data/{index}/attributes/latitude`, `/data/{index}/attributes/longitude`) | ascending | `distance` |\n| Distance to (`/data/{index}/attributes/latitude`, `/data/{index}/attributes/longitude`) | descending | `-distance` |\n\n",
                        "enum": [
                            "address",
                            "-address",
                            "at_street",
                            "-at_street",
                            "description",
                            "-description",
                            "latitude",
                            "-latitude",
                            "location_type",
                            "-location_type",
                            "longitude",
                            "-longitude",
                            "municipality",
                            "-municipality",
                            "name",
                            "-name",
                            "on_street",
                            "-on_street",
                            "platform_code",
                            "-platform_code",
                            "platform_name",
                            "-platform_name",
                            "vehicle_type",
                            "-vehicle_type",
                            "wheelchair_boarding",
                            "-wheelchair_boarding",
                            "distance",
                            "-distance"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[stop]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `child_stops`\n* `connecting_stops`\n* `facilities`\n* `parent_station`\n* `route`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\nNote that `route` can only be included if `filter[route]` is present and has exactly one `/data/{index}/relationships/route/data/id`.\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by date when stop is in use. Will be ignored unless filter[route] is present. If filter[service] is present, this filter will be ignored. The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.",
                        "format": "date",
                        "in": "query",
                        "name": "filter[date]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\n\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Latitude in degrees North in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system to search `filter[radius]` degrees around with `filter[longitude]`.\n",
                        "in": "query",
                        "name": "filter[latitude]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Longitude in degrees East in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system to search `filter[radius]` degrees around with `filter[latitude]`.\n",
                        "in": "query",
                        "name": "filter[longitude]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The distance is in degrees as if latitude and longitude were on a flat 2D plane and normal Pythagorean distance was calculated.  Over the region MBTA serves, `0.02` degrees is approximately `1` mile. Defaults to `0.01` degrees (approximately a half mile).\n",
                        "in": "query",
                        "name": "filter[radius]",
                        "required": false,
                        "type": "number"
                    },
                    {
                        "description": "Filter by `/data/{index}/id` (the stop ID). Multiple `/data/{index}/id` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.\n\nMultiple `route_type` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "enum": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4"
                        ],
                        "in": "query",
                        "name": "filter[route_type]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/route/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by service_id for which stop is in use. Multiple service_ids **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[service]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by location_type https://github.com/mbta/gtfs-documentation/blob/master/reference/gtfs.md#stopstxt. Multiple location_type **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[location_type]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Stops"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Stop"
                ]
            }
        },
        "/stops/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Detail for a specific stop.\n\n## Accessibility\n\nWheelchair boarding (`/data/attributes/wheelchair_boarding`) corresponds to [GTFS wheelchair_boarding](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#stopstxt). The MBTA handles parent station inheritance itself, so value can be treated simply:\n\n| Value | Meaning                                       |\n|-------|-----------------------------------------------|\n| `0`   | No Information                                |\n| `1`   | Accessible (if trip is wheelchair accessible) |\n| `2`   | Inaccessible                                  |\n\n\n## Location\n\n### World\n\nUse `/data/attributes/latitude` and `/data/attributes/longitude` to get the location of a stop.\n\n### Entrance\n\nThe stop may be inside a station.  If `/data/relationships/parent_station/data/id` is present, you should look up the parent station (`/stops/{parent_id}`) and use its location to give direction first to the parent station and then route from there to the stop.\n\n\n",
                "operationId": "ApiWeb.StopController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for stop",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[stop]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `child_stops`\n* `connecting_stops`\n* `facilities`\n* `parent_station`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Stop"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Stop"
                ]
            }
        },
        "/trips": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "**NOTE:** A id, route, route_pattern, or name filter **MUST** be present for any trips to be returned.\n\nList of trips, the journies of a particular vehicle through a set of stops on a primary `route` and zero or more alternative `route`s that can be filtered on.\n\n## Accessibility\n\nWheelchair accessibility (`/data/{index}/attributes/wheelchair_accessible`) [as defined in GTFS](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt):\n\n| Value | Meaning                                            |\n|-------|----------------------------------------------------|\n| `0`   | No information                                     |\n| `1`   | Accessible (at stops allowing wheelchair_boarding) |\n| `2`   | Inaccessible                                       |\n\n\n## Grouping\n\nMultiple trips **may** be grouped together using `/data/{index}/attributes/block_id`. A block represents a series of trips scheduled to be operated by the same vehicle.\n\n## Naming\n\nThere are 3 names associated with a trip.\n\n| API Field                   | GTFS              | Show users? |\n|-----------------------------|-------------------|-------------|\n| `/data/attributes/headsign` | `trip_headsign`   | Yes         |\n| `/data/attributes/name`     | `trip_short_name` | Yes         |\n| `/data/id`                  | `trip_id`         | No          |\n\n\n",
                "operationId": "ApiWeb.TripController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/percentage` | ascending | `percentage` |\n| `/data/{index}/attributes/percentage` | descending | `-percentage` |\n| `/data/{index}/attributes/status` | ascending | `status` |\n| `/data/{index}/attributes/status` | descending | `-status` |\n| `/data/{index}/attributes/bikes_allowed` | ascending | `bikes_allowed` |\n| `/data/{index}/attributes/bikes_allowed` | descending | `-bikes_allowed` |\n| `/data/{index}/attributes/block_id` | ascending | `block_id` |\n| `/data/{index}/attributes/block_id` | descending | `-block_id` |\n| `/data/{index}/attributes/direction_id` | ascending | `direction_id` |\n| `/data/{index}/attributes/direction_id` | descending | `-direction_id` |\n| `/data/{index}/attributes/headsign` | ascending | `headsign` |\n| `/data/{index}/attributes/headsign` | descending | `-headsign` |\n| `/data/{index}/attributes/name` | ascending | `name` |\n| `/data/{index}/attributes/name` | descending | `-name` |\n| `/data/{index}/attributes/wheelchair_accessible` | ascending | `wheelchair_accessible` |\n| `/data/{index}/attributes/wheelchair_accessible` | descending | `-wheelchair_accessible` |\n\n",
                        "enum": [
                            "percentage",
                            "-percentage",
                            "status",
                            "-status",
                            "bikes_allowed",
                            "-bikes_allowed",
                            "block_id",
                            "-block_id",
                            "direction_id",
                            "-direction_id",
                            "headsign",
                            "-headsign",
                            "name",
                            "-name",
                            "wheelchair_accessible",
                            "-wheelchair_accessible"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[trip]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `route`\n* `vehicle`\n* `service`\n* `shape`\n* `predictions`\n* `route_pattern`\n* `stops`\n* `occupancies`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n| include         | Description |\n|-----------------|-------------|\n| `route`         | The *primary* route for the trip. |\n| `vehicle`       | The vehicle on this trip. |\n| `service`       | The service controlling when this trip is active. |\n| `shape`         | The shape of the trip. |\n| `route_pattern` | The route pattern for the trip. |\n| `predictions`   | Predictions of when the `vehicle` on this `trip` will arrive at or depart from each stop on the route(s) on the `trip`. |\n| `stops`         | The stops this trip goes through. |\n| `occupancies`   | **EXPERIMENTAL:** The trip's static occupancy data. For information on experimental features, see: https://www.mbta.com/developers/v3-api/versioning.|\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by trips on a particular date The active date is the service date. Trips that begin between midnight and 3am are considered part of the previous service day. The format is ISO8601 with the template of YYYY-MM-DD.",
                        "format": "date",
                        "in": "query",
                        "name": "filter[date]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\n\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/route/data/id`.\n\nMultiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by route pattern IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[route_pattern]",
                        "required": false,
                        "type": "string",
                        "x-example": "Red-1-0,Red-1-1"
                    },
                    {
                        "description": "Filter by multiple IDs. **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string",
                        "x-example": "1,2"
                    },
                    {
                        "description": "Filter by multiple names. **MUST** be a comma-separated (U+002C COMMA, \",\") list.",
                        "in": "query",
                        "name": "filter[name]",
                        "required": false,
                        "type": "string",
                        "x-example": "300,302"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Trips"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Trip"
                ]
            }
        },
        "/trips/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Single trip - the journey of a particular vehicle through a set of stops\n\n## Accessibility\n\nWheelchair accessibility (`/data/attributes/wheelchair_accessible`) [as defined in GTFS](https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md#tripstxt):\n\n| Value | Meaning                                            |\n|-------|----------------------------------------------------|\n| `0`   | No information                                     |\n| `1`   | Accessible (at stops allowing wheelchair_boarding) |\n| `2`   | Inaccessible                                       |\n\n\n## Grouping\n\nMultiple trips **may** be grouped together using `/data/attributes/block_id`. A block represents a series of trips scheduled to be operated by the same vehicle.\n\n## Naming\n\nThere are 3 names associated with a trip.\n\n| API Field                   | GTFS              | Show users? |\n|-----------------------------|-------------------|-------------|\n| `/data/attributes/headsign` | `trip_headsign`   | Yes         |\n| `/data/attributes/name`     | `trip_short_name` | Yes         |\n| `/data/id`                  | `trip_id`         | No          |\n\n\n",
                "operationId": "ApiWeb.TripController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for a trip",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[trip]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `route`\n* `vehicle`\n* `service`\n* `shape`\n* `predictions`\n* `route_pattern`\n* `stops`\n* `occupancies`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n| include         | Description |\n|-----------------|-------------|\n| `route`         | The *primary* route for the trip. |\n| `vehicle`       | The vehicle on this trip. |\n| `service`       | The service controlling when this trip is active. |\n| `shape`         | The shape of the trip. |\n| `route_pattern` | The route pattern for the trip. |\n| `predictions`   | Predictions of when the `vehicle` on this `trip` will arrive at or depart from each stop on the route(s) on the `trip`. |\n| `stops`         | The stops this trip goes through. |\n| `occupancies`   | **EXPERIMENTAL:** The trip's static occupancy data. For information on experimental features, see: https://www.mbta.com/developers/v3-api/versioning.|\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Trip"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Trip"
                ]
            }
        },
        "/vehicles": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "List of vehicles (buses, ferries, and trains)\n\n## Direction\n\n### World\n\nTo figure out which way the vehicle is pointing at the location, use `/data/{index}/attributes/bearing`.  This can be the compass bearing, or the direction towards the next stop or intermediate location.\n\n### Trip\n\nTo get the direction around the stops in the trip use `/data/{index}/attributes/direction_id`.\n\n## Location\n\n### World\n\nUse `/data/{index}/attributes/latitude` and `/data/{index}/attributes/longitude` to get the location of a vehicle.\n\n### Trip\n\nUse `/data/{index}/attributes/current_stop_sequence` to get the stop number along the trip.  Useful for linear stop indicators.  Position relative to the current stop is in `/data/{index}/attributes/current_status`.\n\n## Movement\n\n### World\n\nUse `/data/{index}/attributes/speed` to get the speed of the vehicle in meters per second.\n\n",
                "operationId": "ApiWeb.VehicleController.index",
                "parameters": [
                    {
                        "description": "Offset (0-based) of first element in the page",
                        "in": "query",
                        "minimum": 0,
                        "name": "page[offset]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Max number of elements to return",
                        "in": "query",
                        "minimum": 1,
                        "name": "page[limit]",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Results can be [sorted](http://jsonapi.org/format/#fetching-sorting) by the id or any `/data/{index}/attributes` key. Assumes ascending; may be prefixed with '-' for descending\n\n| JSON pointer | Direction | `sort`     |\n|--------------|-----------|------------|\n| `/data/{index}/attributes/bearing` | ascending | `bearing` |\n| `/data/{index}/attributes/bearing` | descending | `-bearing` |\n| `/data/{index}/attributes/current_status` | ascending | `current_status` |\n| `/data/{index}/attributes/current_status` | descending | `-current_status` |\n| `/data/{index}/attributes/current_stop_sequence` | ascending | `current_stop_sequence` |\n| `/data/{index}/attributes/current_stop_sequence` | descending | `-current_stop_sequence` |\n| `/data/{index}/attributes/direction_id` | ascending | `direction_id` |\n| `/data/{index}/attributes/direction_id` | descending | `-direction_id` |\n| `/data/{index}/attributes/label` | ascending | `label` |\n| `/data/{index}/attributes/label` | descending | `-label` |\n| `/data/{index}/attributes/latitude` | ascending | `latitude` |\n| `/data/{index}/attributes/latitude` | descending | `-latitude` |\n| `/data/{index}/attributes/longitude` | ascending | `longitude` |\n| `/data/{index}/attributes/longitude` | descending | `-longitude` |\n| `/data/{index}/attributes/occupancy_status` | ascending | `occupancy_status` |\n| `/data/{index}/attributes/occupancy_status` | descending | `-occupancy_status` |\n| `/data/{index}/attributes/speed` | ascending | `speed` |\n| `/data/{index}/attributes/speed` | descending | `-speed` |\n| `/data/{index}/attributes/updated_at` | ascending | `updated_at` |\n| `/data/{index}/attributes/updated_at` | descending | `-updated_at` |\n\n",
                        "enum": [
                            "bearing",
                            "-bearing",
                            "current_status",
                            "-current_status",
                            "current_stop_sequence",
                            "-current_stop_sequence",
                            "direction_id",
                            "-direction_id",
                            "label",
                            "-label",
                            "latitude",
                            "-latitude",
                            "longitude",
                            "-longitude",
                            "occupancy_status",
                            "-occupancy_status",
                            "speed",
                            "-speed",
                            "updated_at",
                            "-updated_at"
                        ],
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[vehicle]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `trip`\n* `stop`\n* `route`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n| include | Description                                                                                                                                                                                                                                                                                                                                                  |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `trip`  | The trip which the vehicle is currently operating.                                                                                                                                                                                                                                                                                                           |\n| `stop`  | The vehicle's current (when `current_status` is **STOPPED_AT**) or *next* stop.                                                                                                                                                                                                                                                                              |\n| `route` | The one route that is designated for that trip, as in GTFS `trips.txt`.  A trip might also provide service on other routes, identified by the MBTA's `multi_route_trips.txt` GTFS extension. `filter[route]` does consider the multi_route_trips GTFS extension, so it is possible to filter for one route and get a different route included in the response. |\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by multiple IDs. Multiple IDs **MUST** be a comma-separated (U+002C COMMA, \",\") list. Cannot be combined with any other filter.",
                        "in": "query",
                        "name": "filter[id]",
                        "required": false,
                        "type": "string",
                        "x-example": "1,2"
                    },
                    {
                        "description": "Filter by `/data/{index}/relationships/trip/data/id`. Multiple `/data/{index}/relationships/trip/data/id` **MUST** be a comma-separated (U+002C COMMA, \",\") list. Cannot be combined with any other filter.",
                        "in": "query",
                        "name": "filter[trip]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by label. Multiple `label` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[label]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by route. If the vehicle is on a [multi-route trip](https://groups.google.com/forum/#!msg/massdotdevelopers/1egrhNjT9eA/iy6NFymcCgAJ), it will be returned for any of the routes. Multiple `route_id` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n",
                        "in": "query",
                        "name": "filter[route]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by direction of travel along the route. Must be used in conjuction with `filter[route]` to apply.\n\nThe meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.\n\n\nOnly used if `filter[route]` is also present.\n",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "in": "query",
                        "name": "filter[direction_id]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter by route_type: https://developers.google.com/transit/gtfs/reference/routes-file.\n\nMultiple `route_type` **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\n\n",
                        "enum": [
                            "0",
                            "1",
                            "2",
                            "3",
                            "4"
                        ],
                        "in": "query",
                        "name": "filter[route_type]",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Vehicles"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/BadRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Vehicle"
                ]
            }
        },
        "/vehicles/{id}": {
            "get": {
                "consumes": [
                    "application/vnd.api+json"
                ],
                "description": "Single vehicle (bus, ferry, or train)\n\n## Direction\n\n### World\n\nTo figure out which way the vehicle is pointing at the location, use `/data/attributes/bearing`.  This can be the compass bearing, or the direction towards the next stop or intermediate location.\n\n### Trip\n\nTo get the direction around the stops in the trip use `/data/attributes/direction_id`.\n\n## Location\n\n### World\n\nUse `/data/attributes/latitude` and `/data/attributes/longitude` to get the location of a vehicle.\n\n### Trip\n\nUse `/data/attributes/current_stop_sequence` to get the stop number along the trip.  Useful for linear stop indicators.  Position relative to the current stop is in `/data/attributes/current_status`.\n\n## Movement\n\n### World\n\nUse `/data/attributes/speed` to get the speed of the vehicle in meters per second.\n\n",
                "operationId": "ApiWeb.VehicleController.show",
                "parameters": [
                    {
                        "description": "Unique identifier for a vehicle",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Fields to include with the response. Multiple fields **MUST** be a comma-separated (U+002C COMMA, \",\") list.\n\nNote that fields can also be selected for included data types: see the [V3 API Best Practices](https://www.mbta.com/developers/v3-api/best-practices) for an example.\n",
                        "in": "query",
                        "name": "fields[vehicle]",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Relationships to include.\n\n* `trip`\n* `stop`\n* `route`\n\nThe value of the include parameter **MUST** be a comma-separated (U+002C COMMA, \",\") list of relationship paths. A relationship path is a dot-separated (U+002E FULL-STOP, \".\") list of relationship names. [JSONAPI \"include\" behavior](http://jsonapi.org/format/#fetching-includes)\n\n| include | Description                                                                                                                                                                                                                                                                                                                                                  |\n|---------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `trip`  | The trip which the vehicle is currently operating.                                                                                                                                                                                                                                                                                                           |\n| `stop`  | The vehicle's current (when `current_status` is **STOPPED_AT**) or *next* stop.                                                                                                                                                                                                                                                                              |\n| `route` | The one route that is designated for that trip, as in GTFS `trips.txt`.  A trip might also provide service on other routes, identified by the MBTA's `multi_route_trips.txt` GTFS extension. `filter[route]` does consider the multi_route_trips GTFS extension, so it is possible to filter for one route and get a different route included in the response. |\n\n",
                        "in": "query",
                        "name": "include",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/vnd.api+json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Vehicle"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/NotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/NotAcceptable"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#/definitions/TooManyRequests"
                        }
                    }
                },
                "summary": "",
                "tags": [
                    "Vehicle"
                ]
            }
        }
    },
    "security": [
        {
            "api_key_in_query": []
        },
        {
            "api_key_in_header": []
        }
    ],
    "securityDefinitions": {
        "api_key_in_header": {
            "description": "##### Header\nWithout an api key as a request header or in the query string, requests will be tracked by IP address and have stricter rate limit. [Register for a key](/register)\n\nThe HTTP headers returned in any API response show your rate limit status:\n| Header | Description |\n| ------ | ----------- |\n| `x-ratelimit-limit` | The maximum number of requests you're allowed to make per time window. |\n| `x-ratelimit-remaining` | The number of requests remaining in the current time window. |\n| `x-ratelimit-reset` | The time at which the current rate limit time window ends in UTC epoch seconds. |\n\n",
            "in": "header",
            "name": "x-api-key",
            "type": "apiKey"
        },
        "api_key_in_query": {
            "description": "##### Query Parameter\nWithout an api key in the query string or as a request header, requests will be tracked by IP address and have stricter rate limit. [Register for a key](/register)\n\nThe HTTP headers returned in any API response show your rate limit status:\n| Header | Description |\n| ------ | ----------- |\n| `x-ratelimit-limit` | The maximum number of requests you're allowed to make per time window. |\n| `x-ratelimit-remaining` | The number of requests remaining in the current time window. |\n| `x-ratelimit-reset` | The time at which the current rate limit time window ends in UTC epoch seconds. |\n\n",
            "in": "query",
            "name": "api_key",
            "type": "apiKey"
        }
    },
    "swagger": "2.0"
}
